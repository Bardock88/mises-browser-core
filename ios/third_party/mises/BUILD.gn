import("//build/config/ios/ios_sdk.gni")
import("//build/config/ios/swift_source_set.gni")
import("mises.gni")

declare_args() {
  env_prefix = "Device"
}


if (target_environment == "simulator") {
    env_prefix = "Sim"
}
if (!is_debug) {
  env_prefix = "Distribution"
}

config("config") {
  visibility = [ ":*" ]
  #framework_dir = rebase_path("//mises/ios/third_party/mises/$env_prefix/Frameworks")
  include_dirs = [ "//mises/ios/third_party/mises/forwarding_headers" ]
  cflags = [
    "-Wno-deprecated",
    "-Wno-deprecated-declarations",
    "-Wno-semicolon-before-method-body",
  ]
  ldflags = [
   #"-force_load", "$framework_dir/Lottie3.framework/Lottie",
  ]
}

swift_source_set("mises_swift") {
    sources = [
      "ExpoModulesProvider.swift",
    ]
    framework_dirs = [ "//mises/ios/third_party/mises/$env_prefix/Frameworks" ]

    frameworks = [
      "Foundation.framework",
      "ExpoModulesCore.framework",
    ]
    public_configs = [
      ":config",
      ":mises_config",
      "//build/config/compiler:enable_arc",
      "//build/config/compiler:enable_legacy_dispatch",
    ]
    configs += [ ":mises_swift_config" ]
    bridge_header = "mises_swift_bridge.h"
}
source_set("mises") {
  # From gn documentation:
  #   https://chromium.googlesource.com/chromium/src/+/master/tools/gn/docs/reference.md#ldflags
  # "ldflags are NOT pushed to dependents, so applying ldflags to source sets
  # or static libraries will be a no-op. If you want to apply ldflags to
  # dependent targets, put them in a config and set it in the
  # all_dependent_configs or public_configs."
  #
  # This source_set must be specified as a direct deps of an ios_app_bundle
  # target for ldflags specified in :mises_config to be applied.
  
  sources = [
    "mises_web_client.mm",
    "mises_java_script_feature.mm",
    "mises_utils.mm",
    #"mises_lcd_service.mm",
    "mises_share_service.mm",
    "mises_account_service.mm",
    "mises_application_delegate.mm",
    "RCTAnalytics.mm",
    "RCTScreenshotDetect.mm",
    "RCTMinimizer.mm",
    "ReactAppDelegate.mm",
    "SSZipArchive/SSZipArchive.m",
    "mises_webstate_tracker.mm",
    "RCTAsyncLocalStorage.m",
    "RCTPersistStore.m"
  ]
  public_configs = [
    ":config",
    ":mises_config",
      
   "//build/config/compiler:enable_arc",
   "//build/config/compiler:enable_legacy_dispatch",
  ]
   
  remove_configs = [
    "//build/config/compiler:no_exceptions",
  ]


  configs += public_configs
  configs -= remove_configs
  deps = [
    ":mises_bundle_data",
    ":mises_frameworks",
    ":mises_fonts",
    ":mises_swift",
    "//build/config:executable_deps",
    "//ui/base",
    "//ios/web",
    "//ios/web/common",
    "//ios/web/common:user_agent",
    "//ios/web/public",
    "//ios/web/js_messaging",
    "//ios/web/public/js_messaging",
    "//ios/chrome/browser/ui/commands",
    "//base/third_party/double_conversion",
  ]
}
bundle_data("mises_bundle_data") {
  visibility = [ ":mises" ]
  sources = [
    "$env_prefix/Bundles/AccessibilityResources.bundle",
    "$env_prefix/Bundles/Mises_Data.bundle",
    "$env_prefix/Bundles/Mises_DesignSystem.bundle",
    "$env_prefix/Bundles/Mises_Favicon.bundle",
    "$env_prefix/Bundles/Mises_FaviconModels.bundle",
    "$env_prefix/Bundles/Mises_MisesStrings.bundle",
    "$env_prefix/Bundles/Mises_MisesUI.bundle",
    "$env_prefix/Bundles/Mises_MisesWallet.bundle",
    "$env_prefix/Bundles/Mises_Shared.bundle",
    "$env_prefix/Bundles/Mises_Mises.bundle",
    "Bundles/branch.json",
    "Bundles/injected-provider.bundle.js",
    "Bundles/__firefox__.js",
    "Bundles/InpageBridgeWeb3.js",
    "Bundles/main.jsbundle",
    "Bundles/MetaMaskModule.chunk.bundle",
    "Bundles/MisesWalletModule.chunk.bundle",
    "Bundles/vendor-default.chunk.bundle",
    "Bundles/vendor-metamask.chunk.bundle",
    "Bundles/vendor-mises-wallet.chunk.bundle",
    
    "Bundles/GoogleService-Info.plist",
 ]
  outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
}

  action_foreach("sign_mises_frameworks") {
    script = "//build/config/ios/codesign.py"
    sources = [ 
      "$env_prefix/Frameworks/Mixpanel.framework",
      "$env_prefix/Frameworks/OpenSSL.framework",
      "$env_prefix/Frameworks/WebRTC.framework",
      "$env_prefix/Frameworks/libswift_Concurrency.dylib",
    ]
    outputs = [ 
      "$root_out_dir/{{source_file_part}}",
     ]
    args = [
      "code-sign-file",
      "--identity=" + ios_code_signing_identity,
      "--output=" + rebase_path("$root_out_dir/{{source_file_part}}"),
      "{{source}}",
    ]
  }
  

bundle_data("mises_frameworks") {
  visibility = [ ":mises" ]
  sources = get_target_outputs(":sign_mises_frameworks")
  outputs = [ "{{bundle_resources_dir}}/Frameworks/{{source_file_part}}" ]
  public_deps = [ ":sign_mises_frameworks" ]
}

bundle_data("mises_fonts") {
  visibility = [ ":mises" ]
  sources = [
        "Fonts/Entypo.ttf",
        "Fonts/AntDesign.ttf",
        "Fonts/EvilIcons.ttf",
        "Fonts/Feather.ttf",
        "Fonts/FontAwesome.ttf",
        "Fonts/Foundation.ttf",
        "Fonts/Ionicons.ttf",
        "Fonts/MaterialCommunityIcons.ttf",
        "Fonts/MaterialIcons.ttf",
        "Fonts/Octicons.ttf",
        "Fonts/SimpleLineIcons.ttf",
        "Fonts/Zocial.ttf",
        "Fonts/Metamask.ttf",
        "Fonts/Roboto-Black.ttf",
        "Fonts/Roboto-BlackItalic.ttf",
        "Fonts/Roboto-Bold.ttf",
        "Fonts/Roboto-BoldItalic.ttf",
        "Fonts/Roboto-Italic.ttf",
        "Fonts/Roboto-Light.ttf",
        "Fonts/Roboto-LightItalic.ttf",
        "Fonts/Roboto-Medium.ttf",
        "Fonts/Roboto-MediumItalic.ttf",
        "Fonts/Roboto-Regular.ttf",
        "Fonts/Roboto-Thin.ttf",
        "Fonts/Roboto-ThinItalic.ttf",
        "Fonts/FontAwesome5_Brands.ttf",
        "Fonts/FontAwesome5_Regular.ttf",
        "Fonts/FontAwesome5_Solid.ttf",
        "Fonts/EuclidCircularB-Bold.otf",
        "Fonts/EuclidCircularB-BoldItalic.otf",
        "Fonts/EuclidCircularB-Light.otf",
        "Fonts/EuclidCircularB-LightItalic.otf",
        "Fonts/EuclidCircularB-Medium.otf",
        "Fonts/EuclidCircularB-MediumItalic.otf",
        "Fonts/EuclidCircularB-Regular.otf",
        "Fonts/EuclidCircularB-RegularItalic.otf",
        "Fonts/EuclidCircularB-Semibold.otf",
        "Fonts/EuclidCircularB-SemiboldItalic.otf",

 ]
  outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
}

config("mises_swift_config") {
  swiftflags = [
    "-I../../mises", 
    "-F../../mises/ios/third_party/mises/$env_prefix/Frameworks",
  ]
}
config("mises_config") {
  visibility = [ ":mises", ":mises_swift"]
  cflags = [ "-Wno-nullability-completeness", "-Wno-extra-semi" ,"-Wno-header-hygiene"]
  framework_dirs = [ "//mises/ios/third_party/mises/$env_prefix/Frameworks" ]
  frameworks = [
    "BEMCheckBox.framework",
    "BVLinearGradient.framework",
    "Base64.framework",
    #"Branch.framework",
    "BranchSDK.framework",
    "Bugsnag.framework",
    "CocoaAsyncSocket.framework",
    "CodePush.framework",
    "CoreModules.framework",
    "DoubleConversion.framework",
    "EXApplication.framework",
    "EXConstants.framework",
    "EXFileSystem.framework",
    "EXFont.framework",
    "Expo.framework",
    "ExpoAppleAuthentication.framework",
    "ExpoClipboard.framework",
    "ExpoCrypto.framework",
    "ExpoKeepAwake.framework",
    "ExpoModulesCore.framework",
    "ExpoWebBrowser.framework",
    "FBLPromises.framework",
    "FirebaseAnalytics.framework",
    "FirebaseCore.framework",
    "FirebaseCoreInternal.framework",
    "FirebaseCrashlytics.framework",
    "FirebaseDynamicLinks.framework",
    "FirebaseInstallations.framework",
    "GoogleAppMeasurement.framework",
    "GoogleDataTransport.framework",
    "GoogleUtilities.framework",
    "JWT.framework",
    "JWTDecode.framework",
    "Lottie3.framework",
    "Mixpanel.framework",
    "OpenSSL.framework",
    "Pods_RepackMises.framework",
    "RCTAnimation.framework",
    "RCTBlob.framework",
    "RCTImage.framework",
    "RCTLinking.framework",
    "RCTNetwork.framework",
    "RCTPushNotification.framework",
    "RCTSearchApi.framework",
    "RCTSettings.framework",
    "RCTText.framework",
    "RCTTypeSafety.framework",
    "RCTVibration.framework",
    "RNBranch.framework",
    "RNCAsyncStorage.framework",
    "RNCCheckbox.framework",
    "RNCClipboard.framework",
    "RNCMaskedView.framework",
    "RNCPicker.framework",
    "RNDefaultPreference.framework",
    "RNDeviceInfo.framework",
    "RNFS.framework",
    "RNFastImage.framework",
    "RNGestureHandler.framework",
    "RNI18n.framework",
    "RNInAppBrowser.framework",
    "RNKeychain.framework",
    "RNLocalize.framework",
    "RNOS.framework",
    "RNReanimated.framework",
    "RNSVG.framework",
    "RNScreens.framework",
    "RNScrypt.framework",
    "RNSensors.framework",
    "RNSentry.framework",
    "RNShare.framework",
    "RNVectorIcons.framework",
    "React.framework",
    "ReactCommon.framework",
    "React_Codegen.framework",
    "React_RCTAppDelegate.framework",
    "React_jsc.framework",
    "SDWebImage.framework",
    "SDWebImageWebPCoder.framework",
    #"SSZipArchive.framework",
    #"Sdk.framework",
    "Sentry.framework",
    "SentryPrivate.framework",
    #"SocketRocket.framework",
    "SwiftyRSA.framework",
    "TcpSockets.framework",
    "WebRTC.framework",
    #"YogaKit.framework",
    #"boost.framework",
    "callstack_repack.framework",
    "cxxreact.framework",
    "fmt.framework",
    "folly.framework",
    "glog.framework",
    "jsi.framework",
    "jsinspector.framework",
    "jsireact.framework",
    #"libevent.framework",
    "libwebp.framework",
    "logger.framework",
    "lottie_react_native.framework",
    "nanopb.framework",
    #"peertalk.framework",
    "react_native_aes.framework",
    "react_native_background_timer.framework",
    "react_native_blur.framework",
    "react_native_camera.framework",
    "react_native_cookies.framework",
    "react_native_get_random_values.framework",
    "react_native_in_app_review.framework",
    "react_native_netinfo.framework",
    "react_native_randombytes.framework",
    "react_native_safe_area_context.framework",
    "react_native_splash_screen.framework",
    "react_native_video.framework",
    "react_native_view_shot.framework",
    "react_native_webrtc.framework",
    "react_native_webview.framework",
    "reactperflogger.framework",
    "rn_fetch_blob.framework",
    "segment_analytics_react_native.framework",
    "sovran_react_native.framework",
    "yoga.framework",
  ]

  if (build_core_framework ==  0) {
    frameworks += ["mises_wallet_framwork.framework",]
  }

  lib_dirs = [
    "//mises/ios/third_party/mises/$env_prefix/Libs"
  ]  
  libs = [
  ]
}
