import("//mises/build/config.gni")
import("//mises/components/ipfs/buildflags/buildflags.gni")
import("//build/config/features.gni")

declare_args() {
  sardine_client_id = ""
  sardine_client_secret = ""
}

if (is_official_build) {
  assert(sardine_client_id != "")
  assert(sardine_client_secret != "")
}

static_library("browser") {
  sources = [
    "asset_ratio_response_parser.cc",
    "asset_ratio_response_parser.h",
    "asset_ratio_service.cc",
    "asset_ratio_service.h",
    "block_tracker.cc",
    "block_tracker.h",
    "blockchain_list_parser.cc",
    "blockchain_list_parser.h",
    "blockchain_registry.cc",
    "blockchain_registry.h",
    "ens_resolver_task.cc",
    "ens_resolver_task.h",
    "eth_abi_decoder.cc",
    "eth_abi_decoder.h",
    "eth_block_tracker.cc",
    "eth_block_tracker.h",
    "eth_data_builder.cc",
    "eth_data_builder.h",
    "eth_data_parser.cc",
    "eth_data_parser.h",
    "eth_gas_utils.cc",
    "eth_gas_utils.h",
    "eth_nonce_tracker.cc",
    "eth_nonce_tracker.h",
    "eth_pending_tx_tracker.cc",
    "eth_pending_tx_tracker.h",
    "eth_requests.cc",
    "eth_requests.h",
    "eth_response_parser.cc",
    "eth_response_parser.h",
    "eth_topics_builder.cc",
    "eth_topics_builder.h",
    "eth_tx_manager.cc",
    "eth_tx_manager.h",
    "eth_tx_meta.cc",
    "eth_tx_meta.h",
    "eth_tx_state_manager.cc",
    "eth_tx_state_manager.h",
    "ethereum_provider_impl.cc",
    "ethereum_provider_impl.h",
    "json_rpc_requests_helper.cc",
    "json_rpc_requests_helper.h",
    "json_rpc_response_parser.cc",
    "json_rpc_response_parser.h",
    "json_rpc_service.cc",
    "json_rpc_service.h",
    "nonce_tracker.cc",
    "nonce_tracker.h",
    "password_encryptor.cc",
    "password_encryptor.h",
    "swap_request_helper.cc",
    "swap_request_helper.h",
    "swap_response_parser.cc",
    "swap_response_parser.h",
    "swap_service.cc",
    "swap_service.h",
    "tx_manager.cc",
    "tx_manager.h",
    "tx_meta.cc",
    "tx_meta.h",
    "tx_service.cc",
    "tx_service.h",
    "tx_state_manager.cc",
    "tx_state_manager.h",
    "unstoppable_domains_dns_resolve.cc",
    "unstoppable_domains_dns_resolve.h",
    "unstoppable_domains_multichain_calls.cc",
    "unstoppable_domains_multichain_calls.h",
    "bit_domains_resolve_calls.cc",
    "bit_domains_resolve_calls.h",
    "wallet_data_files_installer.cc",
    "wallet_data_files_installer.h",
    "brave_wallet_context_utils.cc",
    "brave_wallet_context_utils.h",
    "json_rpc_service_factory.cc",
    "json_rpc_service_factory.h",
    "brave_wallet_utils.cc",
    "brave_wallet_utils.h",
    "brave_wallet_service.cc",
    "brave_wallet_service.h",
    "brave_wallet_prefs.cc",
    "brave_wallet_prefs.h",
    "fil_block_tracker.cc",
    "fil_block_tracker.h",
    "fil_nonce_tracker.cc",
    "fil_nonce_tracker.h",
    "fil_requests.cc",
    "fil_requests.h",
    "fil_response_parser.cc",
    "fil_response_parser.h",
    "fil_tx_manager.cc",
    "fil_tx_manager.h",
    "fil_tx_meta.cc",
    "fil_tx_meta.h",
    "fil_tx_state_manager.cc",
    "fil_tx_state_manager.h",
  ]
  deps = [
    ":constants",
    ":hd_keyring",
    ":pref_names",
    ":transaction",
    ":utils",
    "//base",
    "//mises/components/api_request_helper",
    "//mises/components/brave_wallet/common",
    "//mises/components/brave_wallet/common:buildflags",
    "//mises/components/brave_wallet/common:common_constants",
    "//mises/components/brave_wallet/common:mojom",
    "//mises/components/brave_wallet/common:pref_names",
    "//mises/components/brave_wallet/common:solana_utils",
    "//mises/components/brave_wallet/common:common_utils",
    "//mises/components/constants",
    "//mises/components/decentralized_dns/core",
    "//mises/components/ipfs/buildflags",
    "//mises/components/json/rs:cxx",
    "//mises/components/resources:strings_grit",
    "//components/component_updater",
    "//components/content_settings/core/browser",
    "//components/keyed_service/core",
    "//components/prefs",
    "//components/sync_preferences",
    "//crypto",
    "//services/data_decoder/public/cpp",
    "//services/network/public/cpp",
    "//third_party/abseil-cpp:absl",
    "//third_party/boringssl",
    "//third_party/re2",
    "//ui/base:base",
    "//url",
  ]

  if (enable_ipfs) {
    deps += [ "//mises/components/ipfs" ]
  }

  configs += [ ":sardine_config" ]
}

if (!is_ios) {
  static_library("permission_utils") {
    sources = [
      "permission_utils.cc",
      "permission_utils.h",
    ]

    deps = [
      ":utils",
      "//base",
      "//mises/components/brave_wallet/common:mojom",
      "//components/permissions:permissions_common",
      "//third_party/blink/public/common",
      "//third_party/re2",
      "//url",
    ]
  }
}

source_set("constants") {
  sources = [
    "brave_wallet_constants.cc",
    "brave_wallet_constants.h",
  ]

  deps = [
    "//base",
    "//mises/components/brave_wallet/common:mojom",
    "//mises/components/resources:strings_grit",
    "//ui/base:base",
  ]

  public_deps = [ "//mises/components/brave_wallet/common" ]
}

source_set("pref_names") {
  sources = [
    "pref_names.cc",
    "pref_names.h",
  ]
}

source_set("utils") {
  sources = [
  ]

  deps = [
    ":constants",
    ":pref_names",
    "//base",
    "//mises/components/brave_wallet/common:buildflags",
    "//mises/components/brave_wallet/common:mojom",
    "//components/content_settings/core/common",
    "//components/prefs",
    "//crypto",
    "//net",
    "//third_party/abseil-cpp:absl",
    "//third_party/boringssl",
    "//url",
  ]

  public_deps = [ "//mises/components/brave_wallet/common" ]
}

source_set("hd_keyring") {
  sources = [
    "ethereum_keyring.cc",
    "ethereum_keyring.h",
    "hd_keyring.cc",
    "hd_keyring.h",
  ]

  deps = [
    ":transaction",
    "internal:hd_key",
    "//base",
    "//mises/components/brave_wallet/common",
    "//mises/components/brave_wallet/common:common_constants",
    "//mises/components/brave_wallet/common:mojom",
    "//mises/components/brave_wallet/common:solana_utils",
    "//crypto",
  ]

  public_deps = [ "//mises/components/brave_wallet/rust:cxx" ]
}

source_set("transaction") {
  sources = [
    "eip1559_transaction.cc",
    "eip1559_transaction.h",
    "eip2930_transaction.cc",
    "eip2930_transaction.h",
    "eth_transaction.cc",
    "eth_transaction.h",
    "rlp_decode.cc",
    "rlp_decode.h",
    "rlp_encode.cc",
    "rlp_encode.h",
  ]

  deps = [
    "//base",
    "//mises/components/brave_wallet/common",
    "//mises/components/brave_wallet/common:mojom",
    "//mises/components/json/rs:cxx",
  ]
}

config("sardine_config") {
  defines = [
    "SARDINE_CLIENT_ID=\"$sardine_client_id\"",
    "SARDINE_CLIENT_SECRET=\"$sardine_client_secret\"",
  ]
}
