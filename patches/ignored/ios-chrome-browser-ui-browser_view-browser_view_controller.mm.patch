diff --git a/ios/chrome/browser/ui/browser_view/browser_view_controller.mm b/ios/chrome/browser/ui/browser_view/browser_view_controller.mm
index 974b4d5eefda0f221d4ebabe90ee35cc3d5b57d6..111758b78f9701f3231c09cc3fcf77c0a55512e2 100644
--- a/ios/chrome/browser/ui/browser_view/browser_view_controller.mm
+++ b/ios/chrome/browser/ui/browser_view/browser_view_controller.mm
@@ -429,7 +429,7 @@ @interface BrowserViewController () <FindBarPresentationDelegate,
     PrimaryToolbarCoordinator* primaryToolbarCoordinator;
 // Secondary toolbar.
 @property(nonatomic, strong)
-    AdaptiveToolbarCoordinator* secondaryToolbarCoordinator;
+    SecondaryToolbarCoordinator* secondaryToolbarCoordinator;
 // The container view for the secondary toolbar.
 // TODO(crbug.com/880656): Convert to a container coordinator.
 @property(nonatomic, strong) UIView* secondaryToolbarContainerView;
@@ -775,6 +775,11 @@ - (void)setPrimary:(BOOL)primary {
   }
   if (primary) {
     [self updateBroadcastState];
+      if (IsSplitToolbarMode(self)) {
+          [self.secondaryToolbarCoordinator activate];
+      } else {
+          [self.primaryToolbarCoordinator activate];
+      }
   }
 }
 
@@ -2785,7 +2790,7 @@ - (CGFloat)headerInsetForOverscrollActionsController:
   OverscrollActionsTabHelper* activeTabHelper =
       OverscrollActionsTabHelper::FromWebState(currentWebState);
   if (controller == activeTabHelper->GetOverscrollActionsController()) {
-    return self.headerHeight;
+      return 0;//return self.headerHeight;
   } else
     return 0;
 }
@@ -3605,4 +3610,12 @@ - (CGRect)webContentAreaForLensCoordinator:(LensCoordinator*)lensCoordinator {
   return UIEdgeInsetsInsetRect(self.contentArea.bounds, viewportInsets);
 }
 
+
+- (void)openSinglePage:(NSString*)url {
+  GURL pageUrl  =  net::GURLWithNSURL([NSURL URLWithString:url]);
+  UrlLoadParams params = UrlLoadParams::SwitchToTab(web::NavigationManager::WebLoadParams(pageUrl));
+  params.user_initiated = NO;
+  UrlLoadingBrowserAgent::FromBrowser(self.browser)->Load(params);
+}
+
 @end
