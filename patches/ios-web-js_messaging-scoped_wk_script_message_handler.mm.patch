diff --git a/ios/web/js_messaging/scoped_wk_script_message_handler.mm b/ios/web/js_messaging/scoped_wk_script_message_handler.mm
index 7b0e14493ae3c929712ac34742750ff587a5a7aa..fb7a99315055d14d21203d9b6a088859ffaea9ed 100644
--- a/ios/web/js_messaging/scoped_wk_script_message_handler.mm
+++ b/ios/web/js_messaging/scoped_wk_script_message_handler.mm
@@ -4,6 +4,8 @@
 
 #import "ios/web/js_messaging/scoped_wk_script_message_handler.h"
 
+#import "ios/web/js_messaging/web_view_js_utils.h"
+
 #if !defined(__has_feature) || !__has_feature(objc_arc)
 #error "This file requires ARC support."
 #endif
@@ -35,6 +37,46 @@ - (void)userContentController:(WKUserContentController*)userContentController
 
 @end
 
+
+
+@interface CRWScriptMessageHandlerWithReply
+    : NSObject <WKScriptMessageHandlerWithReply>
+
+- (instancetype)init NS_UNAVAILABLE;
+
+- (instancetype)initWithCallback:(ScriptMessageWithReplyCallback)callback
+    NS_DESIGNATED_INITIALIZER;
+
+@property(nonatomic) ScriptMessageWithReplyCallback callback;
+
+@end
+
+@implementation CRWScriptMessageHandlerWithReply
+
+- (instancetype)initWithCallback:(ScriptMessageWithReplyCallback)callback {
+  if (self = [super init]) {
+    _callback = callback;
+  }
+  return self;
+}
+
+- (void)userContentController:(WKUserContentController*)userContentController
+      didReceiveScriptMessage:(WKScriptMessage*)message
+                 replyHandler:(void (^)(id, NSString*))replyHandler {
+  ScriptMessageReplyHandler replyValueHandler =
+      ^(const base::Value* reply, NSString* error_message) {
+        // Per the API documentation, specify the result as nil if an error
+        // occurred.
+        id wkResult = error_message ? nil : web::NSObjectFromValueResult(reply);
+        replyHandler(wkResult, error_message);
+      };
+  _callback.Run(message, replyValueHandler);
+}
+
+@end
+
+
+
 ScopedWKScriptMessageHandler::ScopedWKScriptMessageHandler(
     WKUserContentController* user_content_controller,
     NSString* script_handler_name,
@@ -69,6 +111,25 @@ - (void)userContentController:(WKUserContentController*)userContentController
   }
 }
 
+ScopedWKScriptMessageHandler::ScopedWKScriptMessageHandler(
+    WKUserContentController* user_content_controller,
+    NSString* script_handler_name,
+    WKContentWorld* content_world,
+    ScriptMessageWithReplyCallback callback)
+    : content_world_(content_world),
+      user_content_controller_(user_content_controller),
+      script_handler_name_(script_handler_name),
+      script_message_handler_with_reply_(
+          [[CRWScriptMessageHandlerWithReply alloc]
+              initWithCallback:callback]) {
+  DCHECK(content_world);
+  DCHECK(callback);
+  [user_content_controller
+      addScriptMessageHandlerWithReply:script_message_handler_with_reply_
+                          contentWorld:content_world_
+                                  name:script_handler_name_];
+}
+
 ScopedWKScriptMessageHandler::~ScopedWKScriptMessageHandler() {
   if (content_world_) {
     [user_content_controller_
