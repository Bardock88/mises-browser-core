diff --git a/ios/chrome/browser/ui/content_suggestions/content_suggestions_mediator.mm b/ios/chrome/browser/ui/content_suggestions/content_suggestions_mediator.mm
index b4d94d4e97946088ad8de727af8acac6024ca454..57dc4be4443c2771f2c5711b446b70ee0e58c82e 100644
--- a/ios/chrome/browser/ui/content_suggestions/content_suggestions_mediator.mm
+++ b/ios/chrome/browser/ui/content_suggestions/content_suggestions_mediator.mm
@@ -121,6 +121,9 @@
 #import "third_party/abseil-cpp/absl/types/optional.h"
 #import "ui/base/l10n/l10n_util_mac.h"
 
+#import "mises/ios/browser/ui/content_suggestions/cells/content_suggestions_mises_item.h"
+#import "mises/ios/browser/ui/content_suggestions/cells/content_suggestions_mises_box_item.h"
+
 namespace {
 
 using credential_provider_promo::IOSCredentialProviderPromoAction;
@@ -132,7 +135,9 @@ constexpr base::TimeDelta kSafetyCheckRunThreshold = base::Hours(24);
 
 // Maximum number of most visited tiles fetched.
 const NSInteger kMaxNumMostVisitedTiles = 4;
-
+static NSData* gWeb3SitesCache = nil;
+NSString * const kHideMisesService = @"hide_mises_service";
+NSString * const kHideWeb3Site = @"hide_web3_site";
 // Checks the last action the user took on the Credential Provider Promo to
 // determine if it was dismissed.
 bool CredentialProviderPromoDismissed(PrefService* local_state) {
@@ -160,6 +165,9 @@ bool CredentialProviderPromoDismissed(PrefService* local_state) {
   std::unique_ptr<ReadingListModelBridge> _readingListModelBridge;
   std::unique_ptr<synced_sessions::SyncedSessionsObserverBridge>
       _syncedSessionsObserver;
+
+  BOOL _misesWeb3Visible;
+  BOOL _misesFeatureVisible;
 }
 
 // Whether the contents section should be hidden completely.
@@ -223,6 +231,16 @@ bool CredentialProviderPromoDismissed(PrefService* local_state) {
 // For testing-only
 @property(nonatomic, assign) BOOL hasReceivedMagicStackResponse;
 
+@property(nonatomic, strong)
+    NSArray<ContentSuggestionsMostVisitedItem*>* misesWeb3siteItems;
+@property(nonatomic, strong)
+    NSMutableArray<ContentSuggestionsMostVisitedItem*>* freshMisesWeb3siteItems;
+@property(nonatomic, strong)
+    ContentSuggestionsSectionInformation* misesSectionInfo;
+@property(nonatomic, strong)
+    ContentSuggestionsSectionInformation* misesBoxMarginInfo;
+@property(nonatomic, strong)
+    ContentSuggestionsSectionInformation* misesWeb3siteSectionInfo;
 @end
 
 @implementation ContentSuggestionsMediator {
@@ -293,6 +311,7 @@ bool CredentialProviderPromoDismissed(PrefService* local_state) {
     _faviconMediator = [[ContentSuggestionsFaviconMediator alloc]
         initWithLargeIconService:largeIconService
                   largeIconCache:largeIconCache];
+    [_faviconMediator setImageFetcher:browser];
 
     _logoSectionInfo = LogoSectionInformation();
     _mostVisitedSectionInfo = MostVisitedSectionInformation();
@@ -400,6 +419,14 @@ bool CredentialProviderPromoDismissed(PrefService* local_state) {
         safetyCheckManager->StartSafetyCheck();
       }
     }
+      
+    _misesSectionInfo = MisesSectionInformation();
+    _misesBoxMarginInfo = MisesBoxMarginInformation();
+    _misesWeb3siteSectionInfo = MisesWeb3siteSectionInformation();
+    _misesWeb3siteItems = [NSArray array];
+    _misesWeb3Visible = ![[NSUserDefaults standardUserDefaults] boolForKey:kHideWeb3Site];
+    _misesFeatureVisible = ![[NSUserDefaults standardUserDefaults] boolForKey:kHideMisesService];
+    [self fetchWeb3site];
   }
 
   return self;
@@ -1017,9 +1044,10 @@ bool CredentialProviderPromoDismissed(PrefService* local_state) {
     [self.consumer
         showReturnToRecentTabTileWithConfig:self.returnToRecentTabItem];
   }
-  if ([self.mostVisitedItems count]) {
-    [self.consumer setMostVisitedTilesWithConfigs:self.mostVisitedItems];
+  if (([self.mostVisitedItems count] || [self.misesWeb3siteItems count])) {
+      [self setTiles];
   }
+    
   if ([self shouldShowSetUpList]) {
     self.setUpList.delegate = self;
     NSArray<SetUpListItemViewData*>* items = [self setUpListItems];
@@ -1100,7 +1128,8 @@ bool CredentialProviderPromoDismissed(PrefService* local_state) {
   }
 
   self.mostVisitedItems = self.freshMostVisitedItems;
-  [self.consumer setMostVisitedTilesWithConfigs:self.mostVisitedItems];
+  self.misesWeb3siteItems = self.freshMisesWeb3siteItems;
+  [self setTiles];
   [self.delegate contentSuggestionsWasUpdated];
 }
 
@@ -1409,6 +1438,12 @@ bool CredentialProviderPromoDismissed(PrefService* local_state) {
       }
     }
   }
+  for (ContentSuggestionsMostVisitedItem* item in self.misesWeb3siteItems) {
+    if (item.URL == siteURL) {
+      [self.faviconMediator fetchFaviconForMostVisited:item];
+      return;
+    }
+  }
 }
 
 // Adds the Safety Check module to `order` based on the current Safety Check
@@ -1726,6 +1761,9 @@ bool CredentialProviderPromoDismissed(PrefService* local_state) {
   for (ContentSuggestionsMostVisitedItem* item in self.freshMostVisitedItems) {
     item.commandHandler = commandHandler;
   }
+    for (ContentSuggestionsMostVisitedItem* item in self.freshMisesWeb3siteItems) {
+      item.commandHandler = commandHandler;
+    }
 }
 
 - (void)setContentSuggestionsMetricsRecorder:
@@ -1881,4 +1919,143 @@ bool CredentialProviderPromoDismissed(PrefService* local_state) {
   }
 }
 
+
+- (void) fetchWeb3site {
+    if ([self.misesWeb3siteItems count] > 0) {
+      // If some content is already displayed to the user, do not update without a
+      // user action.
+      return;
+    }
+    if (gWeb3SitesCache != nil) {
+        ContentSuggestionsMediator* mediator = self;
+        dispatch_async(dispatch_get_main_queue(), ^{
+            [mediator handleWeb3SitesResponse:gWeb3SitesCache];
+            [mediator reloadAllData];
+            //[self.feedDelegate contentSuggestionsWasUpdated];
+        });
+        return;
+    }
+
+    NSString * apiURLStr =[NSString stringWithFormat:@"https://web3.mises.site/website/config.json"];
+    NSMutableURLRequest *dataRqst = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:apiURLStr] cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:30.0];
+
+    NSURLSession *session=[NSURLSession sharedSession];
+    NSURLSessionTask *dataTask=[session dataTaskWithRequest:dataRqst completionHandler:^(NSData * _Nullable responseData, NSURLResponse * _Nullable response, NSError * _Nullable error) {
+
+        NSString *responseString = [[NSString alloc] initWithBytes:[responseData bytes] length:[responseData length] encoding:NSUTF8StringEncoding];
+        NSData *stringData = [responseString dataUsingEncoding:NSUTF8StringEncoding];
+        ContentSuggestionsMediator* mediator = self;
+        dispatch_async(dispatch_get_main_queue(), ^{
+            [mediator handleWeb3SitesResponse:stringData];
+            [mediator reloadAllData];
+            //[self.feedDelegate contentSuggestionsWasUpdated];
+        });
+
+    }];
+    [dataTask resume];
+
+}
+- (NSArray<ContentSuggestionsMostVisitedItem*> *) convertWeb3Items: (id)jsonArray miseFeature:(int)itemType {
+    NSMutableArray<ContentSuggestionsMostVisitedItem*> *items = [NSMutableArray array];
+    for (id element in jsonArray) {
+      ntp_tiles::NTPTile tile;
+      tile.url = GURL(base::SysNSStringToUTF8(element[@"url"]));
+      tile.title = base::SysNSStringToUTF16(element[@"title"]);
+      tile.favicon_url = GURL(base::SysNSStringToUTF8(element[@"logo"]));
+      ContentSuggestionsMostVisitedItem* item =
+        ConvertNTPTile(tile, self.misesWeb3siteSectionInfo);
+      item.commandHandler = self.commandHandler;
+      item.incognitoAvailable = self.incognitoAvailable;
+      item.itemType = itemType;
+      [items addObject:item];
+        NSLog(@"[fetchWeb3site]:item=%@", element);
+    }
+    return items;
+}
+- (void) handleWeb3SitesResponse:(NSData*) data {
+    NSError *error;
+    NSDictionary* json = [NSJSONSerialization JSONObjectWithData:data options:0 error:&error];
+    if (error || !json) {
+      return;
+    }
+    id recommended_sites = json[@"recommended_sites"];
+    if (![recommended_sites isKindOfClass:[NSArray class]]) {
+        return;
+    }
+    id feature_list = json[@"feature_list"];
+    if (![feature_list isKindOfClass:[NSArray class]]) {
+        return;
+    }
+    NSArray * features = [self convertWeb3Items:feature_list miseFeature:ITEM_TYPE_MISES_FEATURE];
+    NSArray * recommendeds = [self convertWeb3Items:recommended_sites  miseFeature:ITEM_TYPE_WEB3_SITE]
+    
+    ;
+    [self updateMisesWeb3SiteItems: [features arrayByAddingObjectsFromArray:recommendeds]];
+    gWeb3SitesCache = data;
+    [self useFreshMostVisited];
+}
+
+- (void) fetchIconForMisesWeb3SiteItems {
+    ntp_tiles::PopularSites::SitesVector sites;
+    for (ContentSuggestionsMostVisitedItem* item in self.freshMisesWeb3siteItems) {
+        
+        std::u16string title = base::SysNSStringToUTF16(item.title);
+        sites.emplace_back(title, GURL(item.URL), GURL(item.iconURL),
+                GURL(item.iconURL), item.titleSource);
+
+
+    }
+    if (_mostVisitedSites.get())
+        _mostVisitedSites->FetchPopularSitesIcons(sites);
+}
+
+- (void)updateMisesWeb3SiteItems:
+    (NSArray<ContentSuggestionsMostVisitedItem*> *)items {
+
+    self.freshMisesWeb3siteItems =[NSMutableArray arrayWithArray:items];
+
+
+    for (ContentSuggestionsMostVisitedItem* item in self.freshMisesWeb3siteItems) {
+      [self.faviconMediator fetchFaviconForMostVisited:item];
+    }
+
+    [self fetchIconForMisesWeb3SiteItems];
+
+
+
+
+ }
+
+- (void)openMisesWeb3Home {
+  UrlLoadParams params = UrlLoadParams::InCurrentTab(GURL("https://web3.mises.site/"));
+  params.web_params.transition_type = ui::PAGE_TRANSITION_LINK;
+  UrlLoadingBrowserAgent::FromBrowser(self.browser)->Load(params);
+
+}
+
+- (void)toogleWeb3Site {
+    _misesWeb3Visible = !_misesWeb3Visible;
+    [[NSUserDefaults standardUserDefaults] setBool:!_misesWeb3Visible forKey:kHideWeb3Site];
+    [self reloadAllData];
+}
+- (void)toogleMisesFeature {
+    _misesFeatureVisible = !_misesFeatureVisible;
+    [[NSUserDefaults standardUserDefaults] setBool:!_misesFeatureVisible forKey:kHideMisesService];
+    [self reloadAllData];
+
+}
+
+- (void) setTiles {
+    NSMutableArray * array = [[NSMutableArray alloc] init];
+    for (ContentSuggestionsMostVisitedItem* item in self.misesWeb3siteItems) {
+        if (_misesFeatureVisible && (item.itemType == ITEM_TYPE_MISES_FEATURE)) {
+            [array addObject:item];
+        }
+        if (_misesWeb3Visible && (item.itemType == ITEM_TYPE_WEB3_SITE)) {
+            [array addObject:item];
+        }
+    }
+  [self.consumer setMostVisitedTilesWithConfigs:[array arrayByAddingObjectsFromArray:self.mostVisitedItems]];
+}
+
 @end
