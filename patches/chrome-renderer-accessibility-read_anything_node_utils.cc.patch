diff --git a/chrome/renderer/accessibility/read_anything_node_utils.cc b/chrome/renderer/accessibility/read_anything_node_utils.cc
index 36685fed8f77222179f6d53449dd23d1591fb5ba..f270fe185d44e9867734370ab1ef033dae1d3475 100644
--- a/chrome/renderer/accessibility/read_anything_node_utils.cc
+++ b/chrome/renderer/accessibility/read_anything_node_utils.cc
@@ -11,7 +11,7 @@
 #include "ui/accessibility/ax_enum_util.h"
 #include "ui/accessibility/ax_role_properties.h"
 #include "ui/base/l10n/l10n_util.h"
-
+#include "services/screen_ai/buildflags/buildflags.h"
 namespace a11y {
 
 bool IsSuperscript(ui::AXNode* ax_node) {
@@ -34,6 +34,7 @@ bool IsNodeIgnoredForReadAnything(ui::AXNode* ax_node, bool is_pdf) {
   // node but keep the kContentInfo so a line break can be inserted in between
   // pages in GetHtmlTagForPDF.
   if (is_pdf) {
+#if BUILDFLAG(ENABLE_SCREEN_AI_SERVICE)
     // The text content of the aforementioned kBanner or kContentInfo nodes is
     // the same as the text content of its child static text node.
     std::string text = ax_node->GetTextContentUTF8();
@@ -53,6 +54,7 @@ bool IsNodeIgnoredForReadAnything(ui::AXNode* ax_node, bool is_pdf) {
         is_start_or_end_static_text_node) {
       return true;
     }
+#endif
   }
 
   // Ignore interactive elements, except for text fields.
@@ -135,10 +137,12 @@ std::string GetHtmlTagForPDF(ui::AXNode* ax_node, const std::string& html_tag) {
     // Add a line break after each page of an inaccessible PDF for readability
     // since there is no other formatting included in the OCR output.
     case ax::mojom::Role::kContentInfo:
+#if BUILDFLAG(ENABLE_SCREEN_AI_SERVICE)
       if (ax_node->GetTextContentUTF8() ==
           l10n_util::GetStringUTF8(IDS_PDF_OCR_RESULT_END)) {
         return "br";
       }
+#endif
       ABSL_FALLTHROUGH_INTENDED;
     default:
       return html_tag.empty() ? "span" : html_tag;
