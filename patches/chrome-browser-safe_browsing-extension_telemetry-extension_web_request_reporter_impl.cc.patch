diff --git a/chrome/browser/safe_browsing/extension_telemetry/extension_web_request_reporter_impl.cc b/chrome/browser/safe_browsing/extension_telemetry/extension_web_request_reporter_impl.cc
index ae1bc7f9ad839d42b9dbd9a15e6c56c070fc4e54..6db71f5a6997d1925b83ac6753279240cf66964b 100644
--- a/chrome/browser/safe_browsing/extension_telemetry/extension_web_request_reporter_impl.cc
+++ b/chrome/browser/safe_browsing/extension_telemetry/extension_web_request_reporter_impl.cc
@@ -11,11 +11,12 @@
 #include "components/safe_browsing/content/common/safe_browsing.mojom-shared.h"
 #include "components/safe_browsing/core/common/features.h"
 #include "content/public/browser/browser_thread.h"
+#include "components/safe_browsing/buildflags.h"
 
 namespace safe_browsing {
 
 namespace {
-
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 // TODO(crbug.com/1494413): Use EnumTraits for these methods.
 safe_browsing::RemoteHostInfo::ProtocolType
 WebRequestProtocolTypeToRemoteHostInfoProtocolType(
@@ -38,7 +39,7 @@ WebRequestContactInitatorToRemoteHostInfoContactInitiator(
       return safe_browsing::RemoteHostInfo::CONTENT_SCRIPT;
   }
 }
-
+#endif
 }  // namespace
 
 const int ExtensionWebRequestReporterImpl::kUserDataKey;
@@ -86,6 +87,7 @@ void ExtensionWebRequestReporterImpl::SendWebRequestData(
         "SafeBrowsing.ExtensionTelemetry.WebSocketRequestDataSentOrReceived",
         true);
   }
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(profile_);
   if (!telemetry_service || !telemetry_service->enabled() ||
@@ -106,6 +108,7 @@ void ExtensionWebRequestReporterImpl::SendWebRequestData(
           : WebRequestContactInitatorToRemoteHostInfoContactInitiator(
                 contact_initiator_type));
   telemetry_service->AddSignal(std::move(remote_host_signal));
+#endif
 }
 
 void ExtensionWebRequestReporterImpl::Clone(
