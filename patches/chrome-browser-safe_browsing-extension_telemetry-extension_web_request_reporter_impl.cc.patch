diff --git a/chrome/browser/safe_browsing/extension_telemetry/extension_web_request_reporter_impl.cc b/chrome/browser/safe_browsing/extension_telemetry/extension_web_request_reporter_impl.cc
index 5f46376b9c242481edd58b1d1097a8db316ead20..ce5007c18862b8beefcda52221c9884473bf521b 100644
--- a/chrome/browser/safe_browsing/extension_telemetry/extension_web_request_reporter_impl.cc
+++ b/chrome/browser/safe_browsing/extension_telemetry/extension_web_request_reporter_impl.cc
@@ -11,11 +11,12 @@
 #include "components/safe_browsing/content/common/safe_browsing.mojom-shared.h"
 #include "components/safe_browsing/core/common/features.h"
 #include "content/public/browser/browser_thread.h"
+#include "components/safe_browsing/buildflags.h"
 
 namespace safe_browsing {
 
 namespace {
-
+#if BUILDFLAG(FULL_SAFE_BROWSING)
 // TODO(crbug.com/40937112): Use EnumTraits for these methods.
 safe_browsing::RemoteHostInfo::ProtocolType
 WebRequestProtocolTypeToRemoteHostInfoProtocolType(
@@ -38,7 +39,7 @@ WebRequestContactInitatorToRemoteHostInfoContactInitiator(
       return safe_browsing::RemoteHostInfo::CONTENT_SCRIPT;
   }
 }
-
+#endif
 }  // namespace
 
 const int ExtensionWebRequestReporterImpl::kUserDataKey;
@@ -86,6 +87,7 @@ void ExtensionWebRequestReporterImpl::SendWebRequestData(
         "SafeBrowsing.ExtensionTelemetry.WebSocketRequestDataSentOrReceived",
         true);
   }
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(profile_);
   if (!telemetry_service || !telemetry_service->enabled() ||
@@ -101,6 +103,7 @@ void ExtensionWebRequestReporterImpl::SendWebRequestData(
       WebRequestContactInitatorToRemoteHostInfoContactInitiator(
           contact_initiator_type));
   telemetry_service->AddSignal(std::move(remote_host_signal));
+#endif
 }
 
 void ExtensionWebRequestReporterImpl::Clone(
