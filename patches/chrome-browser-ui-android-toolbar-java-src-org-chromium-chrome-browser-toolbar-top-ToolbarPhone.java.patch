diff --git a/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/ToolbarPhone.java b/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/ToolbarPhone.java
index aeac917409efa2f452d95b17af915170c2d91153..0061d5643d8209b5392aed86494aa53042fb32dd 100644
--- a/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/ToolbarPhone.java
+++ b/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/ToolbarPhone.java
@@ -93,13 +93,54 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.function.BooleanSupplier;
 
+import android.view.ViewTreeObserver;
+import android.widget.LinearLayout;
+import android.animation.ValueAnimator;
+import org.chromium.base.ContextUtils;
+import org.chromium.chrome.browser.toolbar.top.HandButton;
+import android.widget.Toast;
+import android.animation.ValueAnimator;
+
+import org.chromium.ui.display.DisplayAndroid;
+import android.os.Bundle;
+import android.widget.ImageButton;
+import android.widget.PopupWindow;
+import android.widget.Toast;
+import org.chromium.base.Log;
+import org.chromium.ui.widget.ChromeImageButton;
+import org.chromium.base.MisesController;
+import org.chromium.chrome.browser.mises.MisesShareWin;
+import org.chromium.chrome.browser.mises.MisesWeb3SafeAlert;
+import org.chromium.chrome.browser.mises.MisesUserInfoMenu;
+import org.chromium.chrome.browser.tab.TabLaunchType;
+import org.chromium.chrome.browser.tabmodel.TabCreatorManager;
+import org.chromium.chrome.browser.tabmodel.TabCreator;
+import org.chromium.chrome.browser.tabmodel.TabModel;
+import org.chromium.content_public.browser.JavaScriptCallback;
+import org.chromium.ui.base.Clipboard;
+import org.json.JSONException;
+import org.json.JSONObject;
+import androidx.fragment.app.FragmentActivity;
+//import com.google.firebase.analytics.FirebaseAnalytics;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.resource.bitmap.CircleCrop;
+import com.bumptech.glide.request.RequestOptions;
+import org.chromium.chrome.browser.ui.appmenu.AppMenuDelegate;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.text.TextUtils;
+import android.util.Base64;
+import android.graphics.PorterDuff.Mode;
+
 /** Phone specific toolbar implementation. */
 public class ToolbarPhone extends ToolbarLayout
         implements OnClickListener,
                 OmniboxSuggestionsDropdownScrollListener,
                 ToolbarDataProvider.Observer {
     /** The amount of time transitioning from one theme color to another should take in ms. */
-    public static final long THEME_COLOR_TRANSITION_DURATION = 250;
+    private static final String TAG = "ToolbarPhone";
+    public static final long THEME_COLOR_TRANSITION_DURATION = 50;
 
     public static final int URL_FOCUS_CHANGE_ANIMATION_DURATION_MS = 225;
     private static final int URL_FOCUS_TOOLBAR_BUTTONS_DURATION_MS = 100;
@@ -140,6 +181,10 @@ public class ToolbarPhone extends ToolbarLayout
     private ViewGroup mToolbarButtonsContainer;
     // Non-null after inflation occurs.
     protected @NonNull ImageView mHomeButton;
+    
+    protected @Nullable HandButton mHandButton;
+    protected @Nullable ImageButton mMisesMainButton;
+
     private TextView mUrlBar;
     protected View mUrlActionContainer;
     private OptionalButtonCoordinator mOptionalButtonCoordinator;
@@ -332,6 +377,7 @@ public class ToolbarPhone extends ToolbarLayout
 
             mToolbarButtonsContainer = findViewById(R.id.toolbar_buttons);
             mHomeButton = findViewById(R.id.home_button);
+            mHandButton = findViewById(R.id.hand_button);
             mUrlBar = findViewById(R.id.url_bar);
             mUrlActionContainer = findViewById(R.id.url_action_container);
             mToolbarBackground =
@@ -346,6 +392,7 @@ public class ToolbarPhone extends ToolbarLayout
             setWillNotDraw(false);
             mUrlFocusTranslationX =
                     getResources().getDimensionPixelSize(R.dimen.toolbar_url_focus_translation_x);
+            setupMisesButton();
 
             // Set hover tooltip texts for toolbar buttons shared between phones and tablets.
             super.setTooltipTextForToolbarButtons();
@@ -509,6 +556,12 @@ public class ToolbarPhone extends ToolbarLayout
 
         mHomeButton.setOnClickListener(this);
 
+        if (mHandButton != null) {
+            mHandButton.setOnClickListener(this);
+        }
+
+        setupMisesButtonClickListener();
+
         getTabSwitcherButtonCoordinator()
                 .getContainerView()
                 .setOnKeyListener(
@@ -589,6 +642,11 @@ public class ToolbarPhone extends ToolbarLayout
                 mTrackerSupplier.get().notifyEvent(EventConstants.PARTNER_HOME_PAGE_BUTTON_PRESSED);
             }
         }
+
+        if (mHandButton != null && mHandButton == v) {
+            openOverscroll();
+        }
+        onClickMisesButton(v);
     }
 
     @Override
@@ -681,9 +739,9 @@ public class ToolbarPhone extends ToolbarLayout
         // Always update the unfocused layout params regardless of whether we are using
         // those in this current layout pass as they are needed for animations.
         boolean changed = updateUnfocusedLocationBarLayoutParams();
-
+        boolean mises_enforced = false;
         if (mLayoutLocationBarInFocusedMode
-                || (mVisualState == VisualState.NEW_TAB_NORMAL
+                || (mises_enforced && mVisualState == VisualState.NEW_TAB_NORMAL
                         && mTabSwitcherState == STATIC_TAB)) {
             int priorVisibleWidth =
                     mLocationBar.getPhoneCoordinator().getOffsetOfFirstVisibleFocusedView();
@@ -751,7 +809,8 @@ public class ToolbarPhone extends ToolbarLayout
     private int getViewBoundsLeftOfLocationBar(@VisualState int visualState) {
         // Uses getMeasuredWidth()s instead of getLeft() because this is called in onMeasure
         // and the layout values have not yet been set.
-        if (visualState == VisualState.NEW_TAB_NORMAL && mTabSwitcherState == STATIC_TAB) {
+        boolean mises_enforced = mNtpSearchBoxScrollFraction >= 1.f;
+        if ((mises_enforced && visualState == VisualState.NEW_TAB_NORMAL) && mTabSwitcherState == STATIC_TAB) {
             return mToolbarSidePaddingForNtp;
         } else if (getLayoutDirection() == LAYOUT_DIRECTION_RTL) {
             return getBoundsAfterAccountingForRightButtons();
@@ -771,6 +830,7 @@ public class ToolbarPhone extends ToolbarLayout
         if (mHomeButton.getVisibility() != GONE) {
             padding = mHomeButton.getMeasuredWidth();
         }
+        padding = getMisesButtonPadding();
         return padding;
     }
 
@@ -782,7 +842,8 @@ public class ToolbarPhone extends ToolbarLayout
     private int getViewBoundsRightOfLocationBar(@VisualState int visualState) {
         // Uses getMeasuredWidth()s instead of getRight() because this is called in onMeasure
         // and the layout values have not yet been set.
-        if (visualState == VisualState.NEW_TAB_NORMAL && mTabSwitcherState == STATIC_TAB) {
+        boolean mises_enforced = mNtpSearchBoxScrollFraction >= 1.f;
+        if ((mises_enforced && visualState == VisualState.NEW_TAB_NORMAL) && mTabSwitcherState == STATIC_TAB) {
             return getMeasuredWidth() - mToolbarSidePaddingForNtp;
         } else if (getLayoutDirection() == LAYOUT_DIRECTION_RTL) {
             return getMeasuredWidth() - getBoundsAfterAccountingForLeftButton();
@@ -889,6 +950,7 @@ public class ToolbarPhone extends ToolbarLayout
     }
 
     private void onNtpScrollChanged(float scrollFraction) {
+        Log.d(TAG,"onNtpScrollChanged:" + scrollFraction);
         mNtpSearchBoxScrollFraction = scrollFraction;
         if (mNtpSearchBoxScrollFraction > 0) {
             updateLocationBarForNtp(mVisualState, urlHasFocus());
@@ -1031,6 +1093,10 @@ public class ToolbarPhone extends ToolbarLayout
         if (mHomeButton.getVisibility() != GONE) {
             mHomeButton.setVisibility(toolbarButtonVisibility);
         }
+        if (mHandButton != null && mHandButton.getVisibility() != GONE) {
+            mHandButton.setVisibility(toolbarButtonVisibility);
+        }
+        updateMisesButtonVisibility(toolbarButtonVisibility);
 
         updateLocationBarLayoutForExpansionAnimation();
     }
@@ -1123,7 +1189,7 @@ public class ToolbarPhone extends ToolbarLayout
             locationBarTranslationX = locationBarBaseTranslationX + mLocationBarNtpOffsetLeft;
         }
 
-        mLocationBar.getPhoneCoordinator().setTranslationX(locationBarTranslationX);
+        //mLocationBar.getPhoneCoordinator().setTranslationX(locationBarTranslationX);
 
         if (!mOptionalButtonAnimationRunning) {
             boolean isUrlFocusChangeInProgressWithScrollCompleted =
@@ -1259,7 +1325,8 @@ public class ToolbarPhone extends ToolbarLayout
         mLocationBar.getPhoneCoordinator().setTranslationX(0);
         if (!mUrlFocusChangeInProgress) {
             mToolbarButtonsContainer.setTranslationY(0);
-            mHomeButton.setTranslationY(0);
+            if (mHomeButton != null) mHomeButton.setTranslationY(0);
+            if (mHandButton != null) mHandButton.setTranslationY(0);
         }
 
         if (!mUrlFocusChangeInProgress && getToolbarShadow() != null) {
@@ -1362,7 +1429,7 @@ public class ToolbarPhone extends ToolbarLayout
         mLocationBar.getPhoneCoordinator().setAlpha(relativeAlpha);
 
         // The search box on the NTP is visible if our omnibox is invisible, and vice-versa.
-        ntpDelegate.setSearchBoxAlpha(1f - relativeAlpha);
+        ntpDelegate.setSearchBoxAlpha(1f - mNtpSearchBoxScrollFraction);
         if (!mForceDrawLocationBarBackground) {
             if (mActiveLocationBarBackground instanceof NtpSearchBoxDrawable) {
                 ((NtpSearchBoxDrawable) mActiveLocationBarBackground).resetBoundsToLastNonToolbar();
@@ -1378,9 +1445,9 @@ public class ToolbarPhone extends ToolbarLayout
      */
     private void updateButtonsTranslationY() {
         int transY = mTabSwitcherState == STATIC_TAB ? Math.min(mNtpSearchBoxTranslation.y, 0) : 0;
-
         mToolbarButtonsContainer.setTranslationY(transY);
-        mHomeButton.setTranslationY(transY);
+        if (mHomeButton != null) mHomeButton.setTranslationY(transY);
+        if (mHandButton != null) mHandButton.setTranslationY(transY);
     }
 
     private void setAncestorsShouldClipChildren(boolean clip) {
@@ -1401,6 +1468,7 @@ public class ToolbarPhone extends ToolbarLayout
         if (mHomeButton.getVisibility() != View.GONE) {
             drawChild(canvas, mHomeButton, SystemClock.uptimeMillis());
         }
+        drawMisesMainButton(canvas);
 
         // Draw the location/URL bar.
         if (mLocationBar.getPhoneCoordinator().getAlpha() != 0 && isLocationBarCurrentlyShown()) {
@@ -1426,6 +1494,33 @@ public class ToolbarPhone extends ToolbarLayout
             canvas.restore();
         }
 
+        if (mHandButton != null && mHandButton.getVisibility() != View.GONE) {
+            canvas.save();
+            Drawable oversButton = mHandButton.getDrawable();
+
+            ViewUtils.translateCanvasToView(mToolbarButtonsContainer, mHandButton, canvas);
+
+            int backgroundWidth = mHandButton.getDrawable().getIntrinsicWidth();
+            int backgroundHeight = mHandButton.getDrawable().getIntrinsicHeight();
+            int backgroundLeft =
+                    (mHandButton.getWidth() - mHandButton.getPaddingLeft()
+                            - mHandButton.getPaddingRight() - backgroundWidth)
+                    / 2;
+            backgroundLeft += mHandButton.getPaddingLeft();
+            int backgroundTop =
+                    (mHandButton.getHeight() - mHandButton.getPaddingTop()
+                            - mHandButton.getPaddingBottom() - backgroundHeight)
+                    / 2;
+            backgroundTop += mHandButton.getPaddingTop();
+            canvas.translate(backgroundLeft, backgroundTop);
+
+            oversButton.setAlpha(rgbAlpha);
+            oversButton.draw(canvas);
+            canvas.restore();
+        }
+
+        drawMisesExtensionButton(canvas, rgbAlpha);
+
         // Draw the tab stack button and associated text if necessary.
         if (getTabSwitcherButtonCoordinator() != null && mUrlExpansionFraction != 1f) {
             // Draw the tab stack button image.
@@ -1491,7 +1586,8 @@ public class ToolbarPhone extends ToolbarLayout
     }
 
     private boolean isChildLeft(View child) {
-        return child == mHomeButton ^ LocalizationUtils.isLayoutRtl();
+        boolean is_main = (mMisesMainButton != null && child == mMisesMainButton);
+        return (child == mHomeButton || is_main) ^ LocalizationUtils.isLayoutRtl();
     }
 
     /**
@@ -1769,6 +1865,12 @@ public class ToolbarPhone extends ToolbarLayout
     @Override
     public void updateButtonVisibility() {
         boolean hideHomeButton = !mIsHomeButtonEnabled;
+        boolean mises_enforce = true;
+        hideHomeButton = mises_enforce;
+        if (mHandButton != null) {
+           if (mises_enforce || !ContextUtils.getAppSharedPreferences().getBoolean("enable_overscroll_button", true))
+           mHandButton.setVisibility(GONE);
+        }
         if (hideHomeButton) {
             mHomeButton.setVisibility(View.GONE);
         } else {
@@ -1795,6 +1897,15 @@ public class ToolbarPhone extends ToolbarLayout
         if (mLocationBar != null) mLocationBar.updateVisualsForState();
 
         if (mLayoutUpdater != null) mLayoutUpdater.run();
+        
+        if (mHomeButton != null) {
+            ImageViewCompat.setImageTintList(mHomeButton, tint);
+        }
+        if (mHandButton != null) {
+            ImageViewCompat.setImageTintList(mHandButton, tint);
+        }
+        if (mMisesExtensionButton != null && mExtensionButtonDrawableOveride == null) 
+            ImageViewCompat.setImageTintList(mMisesExtensionButton, tint);
     }
 
     @Override
@@ -2176,7 +2287,8 @@ public class ToolbarPhone extends ToolbarLayout
     }
 
     private void onTabCountChanged(int numberOfTabs) {
-        mHomeButton.setEnabled(true);
+        if (mHomeButton != null) mHomeButton.setEnabled(true);
+	    if (mHandButton != null) mHandButton.setEnabled(true);
         if (getTabSwitcherButtonCoordinator() != null) {
             // In some use cases, isIncognitoBranded() will return a stale value for whether the
             // current view is in incognito. The mismatched value will result in the retrieval of
@@ -2379,6 +2491,8 @@ public class ToolbarPhone extends ToolbarLayout
     protected boolean shouldDrawShadow() {
         // TODO(twellington): Move this shadow state information to ToolbarDataProvider and show
         // shadow when incognito NTP is scrolled.
+        boolean mises_enforce = true;
+        if (mises_enforce) return false;
         return super.shouldDrawShadow()
                 && mTabSwitcherState == STATIC_TAB
                 && !hideShadowForIncognitoNtp()
@@ -2936,4 +3050,254 @@ public class ToolbarPhone extends ToolbarLayout
     void setNtpSearchBoxScrollFractionForTesting(float ntpSearchBoxScrollFraction) {
         mNtpSearchBoxScrollFraction = ntpSearchBoxScrollFraction;
     }
+
+
+    public void openOverscroll() {
+        Tab currentTab = getToolbarDataProvider().getTab();
+        if (currentTab == null) return;
+
+        String SCRIPT = "var _kbOverscroll;"
++"(function (d) {"
++   " if (typeof _kbOverscroll == 'undefined' || _kbOverscroll == false) {"
++        "d.getElementsByTagName('html')[0].style.transition = '0.5s ease-in-out';"
++        "d.getElementsByTagName('html')[0].style.transform = 'translate(0px, 98vw)';"
++        "d.getElementsByTagName('html')[0].style.overflowY = 'initial';"
++        "d.getElementsByTagName('body')[0].style.display='block';"
++        "d.getElementsByTagName('body')[0].style.position='fixed';"
++        "d.getElementsByTagName('body')[0].style.overflowY='scroll';"
++        "d.getElementsByTagName('body')[0].style.height='98vw';"
++        "window.scrollTo({top: 0,left: 0,behavior: 'smooth' });"
++        "_kbOverscroll = true;"
++    "} else {"
++        "d.getElementsByTagName('html')[0].style.transition = '0.5s ease-in-out';"
++        "d.getElementsByTagName('html')[0].style.transform = '';"
++        "d.getElementsByTagName('html')[0].style.overflowY = 'initial';"
++        "d.getElementsByTagName('body')[0].style.display='';"
++        "d.getElementsByTagName('body')[0].style.position='initial';"
++        "d.getElementsByTagName('body')[0].style.overflowY='auto';"
++        "d.getElementsByTagName('body')[0].style.height='';"
++        "_kbOverscroll = false;}}(document));";
+        currentTab.getWebContents().evaluateJavaScript(SCRIPT, null);
+        // matching chrome-native://newtab and chrome://newtab and kiwi://newtab
+        if (currentTab.isNativePage() && currentTab.getUrl().getSpec().contains("/newtab")) {
+            View nativeView = currentTab.getView();
+            DisplayAndroid display =
+                    DisplayAndroid.getNonMultiDisplay(ContextUtils.getApplicationContext());
+            int screenHeight = display.getDisplayHeight();
+            int targetHeight = (int)Math.round(screenHeight * 0.42);
+            final View handSpacer = nativeView.findViewWithTag("hand_button_spacer");
+            if (handSpacer != null && handSpacer.getHeight() > 0) {
+                ValueAnimator animator = ValueAnimator.ofInt(handSpacer.getHeight(), 0);
+                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+                    @Override
+                    public void onAnimationUpdate(ValueAnimator valueAnimator) {
+                        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) handSpacer.getLayoutParams();
+                        params.height = ((Integer) valueAnimator.getAnimatedValue());
+                        handSpacer.setLayoutParams(params);
+                    }
+                });
+                animator.setDuration(500);
+                animator.start();
+            } else if (handSpacer != null) {
+                ValueAnimator animator = ValueAnimator.ofInt(handSpacer.getHeight(), targetHeight);
+                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+                    @Override
+                    public void onAnimationUpdate(ValueAnimator valueAnimator) {
+                        LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) handSpacer.getLayoutParams();
+                        params.height = ((Integer) valueAnimator.getAnimatedValue());
+                        handSpacer.setLayoutParams(params);
+                    }
+                });
+                animator.setDuration(500);
+                animator.start();
+            }
+        }
+    }
+    
+    public void updateAvatarBtn() {
+        if (mMisesMainButton == null)
+            return;
+        if (!MisesController.getInstance().getMisesAvatar().isEmpty()) {
+            Glide.with(getContext()).load(MisesController.getInstance().getMisesAvatar()).apply(RequestOptions.bitmapTransform(new CircleCrop()))
+                     .error(R.mipmap.head_small).placeholder(R.mipmap.head_small).into(mMisesMainButton);
+        } else {
+            mMisesMainButton.setImageResource(R.mipmap.head_small);
+        }
+    }
+
+    @Override
+    public void OnMisesUserInfoChanged() {
+        if (mMisesMainButton == null)
+            return;
+        Context context = getContext();
+        if (!(context instanceof FragmentActivity) || !(context instanceof TabCreatorManager))
+            return;
+        FragmentActivity chromeTabbedActivity = (FragmentActivity) context;
+        updateAvatarBtn();
+        if (!MisesController.getInstance().getLastShareUrl().isEmpty()) {
+            MisesShareWin shareWin = MisesShareWin.newInstance((TabCreatorManager) context, MisesController.getInstance().getLastShareIcon(),
+                    MisesController.getInstance().getLastShareTitle(),
+                    MisesController.getInstance().getLastShareUrl());
+            MisesController.getInstance().clearLastShareInfo();
+            shareWin.show(chromeTabbedActivity.getSupportFragmentManager(), "MisesShareWin");
+        }
+    }
+
+    @Override
+    protected void updateReloadButtonVisibility(boolean isReloading) {
+    }
+
+
+    private void drawMisesExtensionButton(Canvas canvas, int rgbAlpha) {
+        if (mMisesExtensionButton != null && mMisesExtensionButton.getVisibility() != View.GONE) {
+	    canvas.save();
+	    ChromeImageButton imageButton = mMisesExtensionButton;
+	    Drawable buttonDrawable = mMisesExtensionButton.getDrawable();
+            ViewUtils.translateCanvasToView( mToolbarButtonsContainer, imageButton, canvas);
+            int backgroundWidth = buttonDrawable.getIntrinsicWidth();
+            int backgroundHeight = buttonDrawable.getIntrinsicHeight();
+            int backgroundLeft =
+                    (imageButton.getWidth() - imageButton.getPaddingLeft()
+                            - imageButton.getPaddingRight() - backgroundWidth)
+                            / 2;
+            backgroundLeft += imageButton.getPaddingLeft();
+            int backgroundTop =
+                    (imageButton.getHeight() - imageButton.getPaddingTop()
+                            - imageButton.getPaddingBottom() - backgroundHeight)
+                            / 2;
+            backgroundTop += imageButton.getPaddingTop();
+            canvas.translate(backgroundLeft, backgroundTop);
+            buttonDrawable.setAlpha(rgbAlpha);
+            buttonDrawable.draw(canvas);
+
+            canvas.restore();
+        }
+	    return;
+    }
+    private void drawMisesMainButton(Canvas canvas) {
+        if (mMisesMainButton != null && mMisesMainButton.getVisibility() != View.GONE) {
+            // Draw the New Tab button used in the URL view.
+            drawChild(canvas, mMisesMainButton, SystemClock.uptimeMillis());
+        }
+	    return;
+    }
+    private int getMisesButtonPadding() {
+        int padding = mToolbarSidePadding;
+        if (mMisesMainButton != null && mMisesMainButton.getVisibility() != GONE) {
+            padding = mMisesMainButton.getMeasuredWidth();
+        }
+        return padding;
+    }
+    private void updateMisesButtonVisibility(int toolbarButtonVisibility) {
+
+        if (mMisesMainButton != null && mMisesMainButton.getVisibility() != GONE) {
+            mMisesMainButton.setVisibility(toolbarButtonVisibility);
+        }
+        if (mMisesExtensionButton != null && mMisesExtensionButton.getVisibility() != GONE) {
+            mMisesExtensionButton.setVisibility(toolbarButtonVisibility);
+        }
+    }
+    private void setupMisesButton() {
+        mMisesMainButton =  (ImageButton) findViewById(R.id.mises_main_button);
+        updateAvatarBtn();
+
+        mMisesExtensionButton =  (ChromeImageButton) findViewById(R.id.mises_extension_button);
+    }
+    private void setupMisesButtonClickListener() {
+        if (mMisesMainButton != null)  {
+            mMisesMainButton.setOnClickListener(this);
+            mMisesMainButton.setOnLongClickListener(new View.OnLongClickListener() {
+                @Override
+                public boolean onLongClick(View view) {
+                    openHomepage();
+                    return true;
+                }
+            });
+        }
+        
+	    if (mMisesExtensionButton != null) mMisesExtensionButton.setOnClickListener(this);
+    }
+
+    @Override
+    protected void onClickMisesButton(View v) {
+        super.onClickMisesButton(v);
+        if (mMisesMainButton != null && mMisesMainButton == v) {
+            String id = MisesController.getInstance().getMisesId();
+            String username = MisesController.getInstance().getMisesNickname();
+            String avatar = MisesController.getInstance().getMisesAvatar();
+            MisesUserInfoMenu misesUserInfoMenu = new MisesUserInfoMenu(getContext(), id, username, avatar);
+            misesUserInfoMenu.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Context context = getContext();
+                    TabCreator tabCreator = null;
+                    if (context instanceof TabCreatorManager) {
+                        TabCreatorManager chromeTabbedActivity = (TabCreatorManager) context;
+                        tabCreator = chromeTabbedActivity.getTabCreator(false);
+                    }
+                    if (v.getId() == R.id.tv_my_data) {
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_HOME_BASE_URL + "/userInfo");
+                        }
+                    } else if (v.getId() == R.id.tv_my_rewards) {
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_MINING_BASE_URL + "/bonuses");
+                        }
+                    } else if (v.getId() == R.id.tv_my_rewards_action_mine) {
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_MINING_BASE_URL + "/mining");
+                        }
+                    } else if (v.getId() == R.id.tv_my_rewards_action_redeem) {
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_MINING_BASE_URL + "/bonuses");
+                        }
+                    } else if (v.getId() == R.id.tv_mises_discover) {
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_HOME_BASE_URL + "/home/discover");
+                        }
+                    } else if (v.getId() == R.id.tv_wallet) {
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_WALLET_BASE_URL);
+                        }
+                    } else if (v.getId() == R.id.tv_swap) {
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_SWAP_BASE_URL);
+                        }
+                    } else if (v.getId() == R.id.tv_portal) {
+                        openHomepage();
+                    } else if (v.getId() == R.id.tv_nft) {
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_HOME_BASE_URL + "/nft");
+                        }
+                    } else if (v.getId() == R.id.tv_invite) {  
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_HOME_BASE_URL + "/myInvitation?misesId=" + id);
+                        }
+                    } else if (v.getId() == R.id.tv_login) {
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_HOME_BASE_URL + "/home/me");
+                        }
+                    } else if (v.getId() == R.id.tv_create_mises) {
+                        if (tabCreator != null) {
+                            tabCreator.openSinglePage(MisesController.MISES_WALLET_BASE_URL);
+                        }
+                    } else if (v.getId() == R.id.tv_website || v.getId() == R.id.tv_website1) {
+                        if (tabCreator != null) {
+                            tabCreator.launchUrl("https://www.mises.site", TabLaunchType.FROM_CHROME_UI);
+                        }
+                    }  else if (v.getId() == R.id.tv_twitter || v.getId() == R.id.tv_twitter1) {
+                        if (tabCreator != null) {
+                            tabCreator.launchUrl("https://twitter.com/Mises001", TabLaunchType.FROM_CHROME_UI);
+                        }
+                    } else if (v.getId() == R.id.tv_id) {
+                        Clipboard.getInstance().setText(id);
+			            Toast.makeText(getContext(), getContext().getString(R.string.lbl_id_copied_tip), Toast.LENGTH_SHORT).show();
+			            return;
+   	                } 
+                    misesUserInfoMenu.dismiss();
+                }
+            });
+            misesUserInfoMenu.showAtLocation(mMisesMainButton, Gravity.START | Gravity.TOP, 0, 0);
+        }
+    }
 }
