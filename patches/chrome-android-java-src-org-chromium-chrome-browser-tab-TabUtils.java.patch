diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java
index 95c24ccaa0a936e52617f94b8f7d59d137a23119..d08b76bf9322330d59c236eb576b5582513ec17f 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java
@@ -38,6 +38,8 @@ import org.chromium.url.GURL;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
+import org.chromium.base.ContextUtils;
+
 /**
  * Collection of utility methods that operates on Tab.
  */
@@ -160,6 +162,8 @@ public class TabUtils {
                 tabUserAgent = TabUserAgent.DESKTOP;
             } else {
                 tabUserAgent = TabUserAgent.DEFAULT;
+                if (ContextUtils.getAppSharedPreferences().getBoolean("desktop_mode", false))
+                     tabUserAgent = TabUserAgent.DESKTOP;
             }
             CriticalPersistedTabData.from(tab).setUserAgent(tabUserAgent);
         }
@@ -189,6 +193,8 @@ public class TabUtils {
      * @return Whether or not the screen size is large enough for desktop sites.
      */
     public static boolean isTabLargeEnoughForDesktopSite(Tab tab) {
+        if ((ContextUtils.getAppSharedPreferences().getBoolean("desktop_mode", false)))
+            return true;
         if (!DeviceFormFactor.isNonMultiDisplayContextOnTablet(tab.getContext())) {
             // The device is a phone, do not check the tab size.
             return false;
@@ -217,6 +223,8 @@ public class TabUtils {
      * @return Whether the desktop site should be requested.
      */
     public static boolean isDesktopSiteGlobalEnabled(Profile profile) {
+        if (ContextUtils.getAppSharedPreferences().getBoolean("desktop_mode", false))
+            return true;
         return WebsitePreferenceBridge.isCategoryEnabled(
                 profile, ContentSettingsType.REQUEST_DESKTOP_SITE);
     }
