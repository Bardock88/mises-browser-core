diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManager.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManager.java
index 314fad32870fbd74f5c545e960f7403fb59656e4..a47df903943c98e1fb82de2a8e10c3323d57cc48 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManager.java
@@ -42,6 +42,11 @@ import org.chromium.url.GURL;
 
 import java.util.Stack;
 
+import android.app.Activity;
+import org.chromium.ui.base.WindowAndroid;
+import org.chromium.ui.base.ActivityWindowAndroid;
+import org.chromium.ui.base.IntentRequestTracker;
+
 /**
  * The new bookmark manager that is planned to replace the existing bookmark manager. It holds all
  * views and shared logics between tablet and phone. For tablet/phone specific logics, see
@@ -76,7 +81,9 @@ public class BookmarkManager
     private BookmarkItemsAdapter mAdapter;
     private BookmarkDragStateDelegate mDragStateDelegate;
     private AdapterDataObserver mAdapterDataObserver;
-
+    
+    private ActivityWindowAndroid mWindowAndroid;
+    private IntentRequestTracker mIntentTracker;
     private final BookmarkModelObserver mBookmarkModelObserver = new BookmarkModelObserver() {
         @Override
         public void bookmarkNodeChildrenReordered(BookmarkItem node) {
@@ -274,6 +281,11 @@ public class BookmarkManager
         if (!isDialogUi) {
             RecordUserAction.record("MobileBookmarkManagerPageOpen");
         }
+        mIntentTracker = IntentRequestTracker.createFromActivity((Activity)context);
+	mWindowAndroid = new ActivityWindowAndroid(context, true, mIntentTracker);
+    }
+    public IntentRequestTracker intentTracker() {
+        return mIntentTracker;
     }
 
     @Override
@@ -544,6 +556,16 @@ public class BookmarkManager
         mToolbar.hideSearchView();
     }
 
+    @Override
+    public void importBookmarks() {
+        mBookmarkModel.startImportBookmarks(mWindowAndroid);
+    }
+
+    @Override
+    public void exportBookmarks() {
+        mBookmarkModel.startExportBookmarks();
+    }
+
     @Override
     public void addUIObserver(BookmarkUIObserver observer) {
         mUIObservers.addObserver(observer);
