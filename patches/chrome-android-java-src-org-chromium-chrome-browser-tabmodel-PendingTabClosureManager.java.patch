diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tabmodel/PendingTabClosureManager.java b/chrome/android/java/src/org/chromium/chrome/browser/tabmodel/PendingTabClosureManager.java
index e50544baa39bc1ae73b5828afce195c9be862ecf..3d68f653feddcfab004c5eeaa3877ba0ce61fd83 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/tabmodel/PendingTabClosureManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tabmodel/PendingTabClosureManager.java
@@ -5,6 +5,7 @@
 package org.chromium.chrome.browser.tabmodel;
 
 import org.chromium.chrome.browser.tab.Tab;
+import org.chromium.chrome.browser.tab.state.CriticalPersistedTabData;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -152,6 +153,32 @@ public class PendingTabClosureManager {
             return mRewoundTabs.indexOf(tab);
         }
 
+        private Tab findTabInAllTabModels(int tabId) {
+            Tab tab = TabModelUtils.getTabById(mModelDelegate.getModel(isIncognito()), tabId);
+            if (tab != null) return tab;
+            return TabModelUtils.getTabById(mModelDelegate.getModel(!isIncognito()), tabId);
+        }
+
+	@Override
+    	public int getLastNonExtensionActiveIndex() {
+	//            Log.i("EXTENSIONS", "TabModelImpl - getLastNonExtensionActiveIndex - Step 1");
+            if (mTabModel.getLastNonExtensionActiveIndex() != INVALID_TAB_INDEX) {
+//                Log.i("EXTENSIONS", "TabModelImpl - getLastNonExtensionActiveIndex - Step 1a");
+                Tab parentTab = findTabInAllTabModels(CriticalPersistedTabData.from(TabModelUtils.getCurrentTab(this)).getParentId());
+//                Log.i("EXTENSIONS", "TabModelImpl - getLastNonExtensionActiveIndex - Step 1b");
+                if (parentTab != null) {
+//                  Log.i("EXTENSIONS", "TabModelImpl - getLastNonExtensionActiveIndex - Step 2a");
+                  return mRewoundTabs.indexOf(parentTab);
+                }
+//                Log.i("EXTENSIONS", "TabModelImpl - getLastNonExtensionActiveIndex - Step 3");
+                return mRewoundTabs.indexOf(TabModelUtils.getCurrentTab(mTabModel));
+            }
+//            Log.i("EXTENSIONS", "TabModelImpl - getLastNonExtensionActiveIndex - Step 4");
+            if (!mRewoundTabs.isEmpty()) return 0;
+//            Log.i("EXTENSIONS", "TabModelImpl - getLastNonExtensionActiveIndex - Step 5");
+            return INVALID_TAB_INDEX;
+        }
+
         /**
          * Resets this list to match the original {@link TabModel}.  Note that if the
          * {@link TabModel} doesn't support pending closures this model will be empty.  This should
