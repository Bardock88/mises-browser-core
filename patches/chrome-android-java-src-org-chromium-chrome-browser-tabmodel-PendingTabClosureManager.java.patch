diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tabmodel/PendingTabClosureManager.java b/chrome/android/java/src/org/chromium/chrome/browser/tabmodel/PendingTabClosureManager.java
index cc2f03a1deb01be726e9a8faa15c7fccd054b8f7..919a831eeec3b25bf3a81ccf73fd9ac3f36f8710 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/tabmodel/PendingTabClosureManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tabmodel/PendingTabClosureManager.java
@@ -7,6 +7,7 @@ package org.chromium.chrome.browser.tabmodel;
 import androidx.annotation.NonNull;
 
 import org.chromium.chrome.browser.tab.Tab;
+import org.chromium.chrome.browser.tab.state.CriticalPersistedTabData;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -154,6 +155,25 @@ public class PendingTabClosureManager {
             return mRewoundTabs.indexOf(tab);
         }
 
+        private Tab findTabInAllTabModels(int tabId) {
+            Tab tab = TabModelUtils.getTabById(mTabList, tabId);
+            if (tab != null) return tab;
+            return TabModelUtils.getTabById(mTabList, tabId);
+        }
+
+	    @Override
+    	public int getLastNonExtensionActiveIndex() {
+            if (mTabList.getLastNonExtensionActiveIndex() != INVALID_TAB_INDEX) {
+                Tab parentTab = findTabInAllTabModels(CriticalPersistedTabData.from(TabModelUtils.getCurrentTab(this)).getParentId());
+                if (parentTab != null) {
+                   return mRewoundTabs.indexOf(parentTab);
+                }
+                return mRewoundTabs.indexOf(TabModelUtils.getCurrentTab(mTabList));
+            }
+            if (!mRewoundTabs.isEmpty()) return 0;
+            return INVALID_TAB_INDEX;
+        }
+
         /**
          * Resets this list to match the original {@link TabList}.  Note that if the
          * {@link TabList} doesn't support pending closures this model will be empty.  This should
