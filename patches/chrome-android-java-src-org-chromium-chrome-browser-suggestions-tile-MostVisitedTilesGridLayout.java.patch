diff --git a/chrome/android/java/src/org/chromium/chrome/browser/suggestions/tile/MostVisitedTilesGridLayout.java b/chrome/android/java/src/org/chromium/chrome/browser/suggestions/tile/MostVisitedTilesGridLayout.java
index 8924c885edfa6e495e2938902e879a92008f7b2d..342b203775dd9f6b80378559166113beb06bc81e 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/suggestions/tile/MostVisitedTilesGridLayout.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/suggestions/tile/MostVisitedTilesGridLayout.java
@@ -16,6 +16,7 @@ import android.widget.FrameLayout;
 import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 
+import org.chromium.base.Log;
 import org.chromium.base.MathUtils;
 import org.chromium.base.library_loader.LibraryLoader;
 import org.chromium.chrome.R;
@@ -27,6 +28,8 @@ import org.chromium.chrome.browser.suggestions.SiteSuggestion;
  * A layout that arranges tiles in a grid.
  */
 public class MostVisitedTilesGridLayout extends FrameLayout implements MostVisitedTilesLayout {
+    private static final String TAG = "MostVisitedTilesGridLayout";
+
     private final int mMinHorizontalSpacing;
     private final int mMaxHorizontalSpacing;
     private final int mMaxWidth;
@@ -66,10 +69,12 @@ public class MostVisitedTilesGridLayout extends FrameLayout implements MostVisit
         mMvtContainer2SidesMarginTablet =
                 getResources().getDimensionPixelOffset(R.dimen.ntp_search_box_start_margin) * 2
                 + getResources().getDimensionPixelOffset(R.dimen.tile_grid_layout_bleed);
-        mTileViewLandscapeEdgePaddingTablet = getResources().getDimensionPixelOffset(
+        /*mTileViewLandscapeEdgePaddingTablet = getResources().getDimensionPixelOffset(
                 R.dimen.tile_grid_layout_landscape_edge_margin_tablet);
         mTileViewPortraitEdgePaddingTablet = getResources().getDimensionPixelOffset(
-                R.dimen.tile_grid_layout_portrait_edge_margin_tablet);
+                R.dimen.tile_grid_layout_portrait_edge_margin_tablet);*/
+        mTileViewLandscapeEdgePaddingTablet = 0;
+        mTileViewPortraitEdgePaddingTablet = 0;
     }
 
     /**
@@ -118,6 +123,7 @@ public class MostVisitedTilesGridLayout extends FrameLayout implements MostVisit
         Pair<Integer, Integer> gridProperties =
                 computeHorizontalDimensions(gridWidthMinusColumns, numColumns);
         int gridStart = gridProperties.first;
+        Log.d(TAG, "gridStart="+gridStart);
         int horizontalSpacing = gridProperties.second;
 
         // Limit the number of rows to mMaxRows.
@@ -170,9 +176,12 @@ public class MostVisitedTilesGridLayout extends FrameLayout implements MostVisit
                     (float) (availableWidth - gridStart * 2) / Math.max(1, numColumns - 1);
         } else {
             // Identically sized spacers are added both between and around the tiles.
-            int spacerCount = numColumns + 1;
+            /*int spacerCount = numColumns + 1;
             horizontalSpacing = (float) availableWidth / spacerCount;
-            gridStart = Math.round(horizontalSpacing);
+            gridStart = Math.round(horizontalSpacing);*/
+            horizontalSpacing = (float) availableWidth / (numColumns - 1);
+            gridStart = (availableWidth-Math.round(horizontalSpacing)*(numColumns - 1))/2;
+            Log.d(TAG, "mark0 gridStart="+gridStart);
         }
 
         if (horizontalSpacing < mMinHorizontalSpacing
@@ -180,8 +189,12 @@ public class MostVisitedTilesGridLayout extends FrameLayout implements MostVisit
             // Ensure column spacing isn't greater than mMaxHorizontalSpacing.
             long gridSidePadding = availableWidth - (long) mMaxHorizontalSpacing * (numColumns - 1);
             if (gridSidePadding > 0) {
+                Log.d(TAG, "horizontalSpacing="+horizontalSpacing);
                 horizontalSpacing = mMaxHorizontalSpacing;
                 gridStart = (int) (gridSidePadding / 2);
+                Log.d(TAG, "mark1 gridStart="+gridStart
+                    +" mMinHorizontalSpacing="+mMinHorizontalSpacing
+                    +" mMaxHorizontalSpacing"+mMaxHorizontalSpacing);
             } else {
                 horizontalSpacing = (float) availableWidth / Math.max(1, numColumns - 1);
                 gridStart = 0;
