diff --git a/chrome/browser/extensions/api/tabs/tabs_event_router.cc b/chrome/browser/extensions/api/tabs/tabs_event_router.cc
index a76d0966c504b98eb2189efc393507d1eff85cef..cf0e0261aca7222ff494cd684afcbf982da7a87f 100644
--- a/chrome/browser/extensions/api/tabs/tabs_event_router.cc
+++ b/chrome/browser/extensions/api/tabs/tabs_event_router.cc
@@ -173,10 +173,21 @@ TabsEventRouter::TabsEventRouter(Profile* profile)
   browser_tab_strip_tracker_.Init();
 
   tab_manager_scoped_observation_.Observe(g_browser_process->GetTabManager());
+
+#if BUILDFLAG(IS_ANDROID)
+  TabModelList::AddObserver(this);
+  if (!TabModelList::models().empty()) {
+    OnTabModelAdded();
+  }
+#endif
 }
 
 TabsEventRouter::~TabsEventRouter() {
   BrowserList::RemoveObserver(this);
+
+#if BUILDFLAG(IS_ANDROID)
+  TabModelList::RemoveObserver(this);
+#endif
 }
 
 bool TabsEventRouter::ShouldTrackBrowser(Browser* browser) {
@@ -373,7 +384,7 @@ void TabsEventRouter::DispatchTabClosingAt(TabStripModel* tab_strip_model,
   object_args.Set(tabs_constants::kWindowIdKey,
                   ExtensionTabUtil::GetWindowIdOfTab(contents));
   object_args.Set(tabs_constants::kWindowClosing,
-                  tab_strip_model->closing_all());
+                  tab_strip_model?tab_strip_model->closing_all():false);
   args.Append(std::move(object_args));
 
   Profile* profile = Profile::FromBrowserContext(contents->GetBrowserContext());
@@ -594,10 +605,12 @@ void TabsEventRouter::DispatchTabUpdatedEvent(
 }
 
 void TabsEventRouter::RegisterForTabNotifications(WebContents* contents) {
+#if !BUILDFLAG(IS_ANDROID)
   favicon_scoped_observations_.AddObservation(
       favicon::ContentFaviconDriver::FromWebContents(contents));
 
   ZoomController::FromWebContents(contents)->AddObserver(this);
+#endif
 
   int tab_id = ExtensionTabUtil::GetTabId(contents);
   DCHECK(tab_entries_.find(tab_id) == tab_entries_.end());
@@ -605,10 +618,12 @@ void TabsEventRouter::RegisterForTabNotifications(WebContents* contents) {
 }
 
 void TabsEventRouter::UnregisterForTabNotifications(WebContents* contents) {
+#if !BUILDFLAG(IS_ANDROID)
   favicon_scoped_observations_.RemoveObservation(
       favicon::ContentFaviconDriver::FromWebContents(contents));
 
   ZoomController::FromWebContents(contents)->RemoveObserver(this);
+#endif
 
   int tab_id = ExtensionTabUtil::GetTabId(contents);
   int removed_count = tab_entries_.erase(tab_id);
