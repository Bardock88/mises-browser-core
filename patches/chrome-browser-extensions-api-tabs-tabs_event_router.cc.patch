diff --git a/chrome/browser/extensions/api/tabs/tabs_event_router.cc b/chrome/browser/extensions/api/tabs/tabs_event_router.cc
index 90ca642a31716f33c5de032e3b34940e966dcd45..9bce10baf35d0d91515b897cdd2a51e901f49cae 100644
--- a/chrome/browser/extensions/api/tabs/tabs_event_router.cc
+++ b/chrome/browser/extensions/api/tabs/tabs_event_router.cc
@@ -174,10 +174,21 @@ TabsEventRouter::TabsEventRouter(Profile* profile)
   browser_tab_strip_tracker_.Init();
 
   tab_manager_scoped_observation_.Observe(g_browser_process->GetTabManager());
+
+#if BUILDFLAG(IS_ANDROID)
+  TabModelList::AddObserver(this);
+  if (!TabModelList::models().empty()) {
+    OnTabModelAdded();
+  }
+#endif
 }
 
 TabsEventRouter::~TabsEventRouter() {
   BrowserList::RemoveObserver(this);
+
+#if BUILDFLAG(IS_ANDROID)
+  TabModelList::RemoveObserver(this);
+#endif
 }
 
 bool TabsEventRouter::ShouldTrackBrowser(Browser* browser) {
@@ -381,7 +392,7 @@ void TabsEventRouter::DispatchTabClosingAt(TabStripModel* tab_strip_model,
   object_args.Set(tabs_constants::kWindowIdKey,
                   ExtensionTabUtil::GetWindowIdOfTab(contents));
   object_args.Set(tabs_constants::kWindowClosing,
-                  tab_strip_model->closing_all());
+                  tab_strip_model?tab_strip_model->closing_all():false);
   args.Append(std::move(object_args));
 
   Profile* profile = Profile::FromBrowserContext(contents->GetBrowserContext());
@@ -602,10 +613,12 @@ void TabsEventRouter::DispatchTabUpdatedEvent(
 }
 
 void TabsEventRouter::RegisterForTabNotifications(WebContents* contents) {
+#if !BUILDFLAG(IS_ANDROID)
   favicon_scoped_observations_.AddObservation(
       favicon::ContentFaviconDriver::FromWebContents(contents));
   zoom_scoped_observations_.AddObservation(
       ZoomController::FromWebContents(contents));
+#endif
 
   int tab_id = ExtensionTabUtil::GetTabId(contents);
   DCHECK(tab_entries_.find(tab_id) == tab_entries_.end());
@@ -613,12 +626,14 @@ void TabsEventRouter::RegisterForTabNotifications(WebContents* contents) {
 }
 
 void TabsEventRouter::UnregisterForTabNotifications(WebContents* contents) {
+#if !BUILDFLAG(IS_ANDROID)
   if (auto* zoom_controller = ZoomController::FromWebContents(contents);
       zoom_scoped_observations_.IsObservingSource(zoom_controller)) {
     zoom_scoped_observations_.RemoveObservation(zoom_controller);
   }
   favicon_scoped_observations_.RemoveObservation(
       favicon::ContentFaviconDriver::FromWebContents(contents));
+#endif
 
   int tab_id = ExtensionTabUtil::GetTabId(contents);
   int removed_count = tab_entries_.erase(tab_id);
