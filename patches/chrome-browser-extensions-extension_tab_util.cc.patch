diff --git a/chrome/browser/extensions/extension_tab_util.cc b/chrome/browser/extensions/extension_tab_util.cc
index 1687e36dd5966b67fad971fc895ebbbe63b57775..eac27ba1af0c099d3ca77d26a1b193b2f7c89f61 100644
--- a/chrome/browser/extensions/extension_tab_util.cc
+++ b/chrome/browser/extensions/extension_tab_util.cc
@@ -234,9 +234,11 @@ base::expected<base::Value::Dict, std::string> ExtensionTabUtil::OpenTab(
           GetControllerFromWindowID(chrome_details, window_id, &error)) {
     browser = controller->GetBrowser();
   } else {
+#if !BUILDFLAG(IS_ANDROID)
     // No matching window.
     if (!params.create_browser_if_needed)
       return base::unexpected(error);
+#endif
 
     browser = CreateAndShowBrowser(profile, user_gesture, &error);
     if (!browser)
@@ -323,18 +325,32 @@ base::expected<base::Value::Dict, std::string> ExtensionTabUtil::OpenTab(
   navigate_params.tabstrip_index = index;
   navigate_params.user_gesture = false;
   navigate_params.tabstrip_add_types = add_types;
+
+#if BUILDFLAG(IS_ANDROID)
+  if (TabModelList::models().empty()) {
+    return base::unexpected("Tabs model not initialized");
+  } 
+  TabModel* tab_model = *(TabModelList::models().begin());
+  WebContents* web_contents = tab_model->CreateNewTabForDevTools(url);
+  navigate_params.navigated_or_inserted_contents = web_contents;
+#else
   base::WeakPtr<content::NavigationHandle> handle = Navigate(&navigate_params);
   if (handle && params.bookmark_id) {
     ChromeNavigationUIData* ui_data =
         static_cast<ChromeNavigationUIData*>(handle->GetNavigationUIData());
     ui_data->set_bookmark_id(*params.bookmark_id);
   }
+#endif
 
   // This happens in locked fullscreen mode.
   if (!navigate_params.navigated_or_inserted_contents) {
     return base::unexpected(tabs_constants::kLockedFullscreenModeNewTabError);
   }
 
+#if BUILDFLAG(IS_ANDROID)
+  TabStripModel* tab_strip = nullptr;
+  int new_index = tab_model->GetActiveIndex();
+#else
   // The tab may have been created in a different window, so make sure we look
   // at the right tab strip.
   TabStripModel* tab_strip = navigate_params.browser->tab_strip_model();
@@ -346,6 +362,7 @@ base::expected<base::Value::Dict, std::string> ExtensionTabUtil::OpenTab(
     if (tab_strip->GetIndexOfWebContents(opener) != TabStripModel::kNoTab)
       tab_strip->SetOpenerOfWebContentsAt(new_index, opener);
   }
+#endif
 
   if (active)
     navigate_params.navigated_or_inserted_contents->SetInitialFocus();
@@ -442,8 +459,10 @@ api::tabs::Tab ExtensionTabUtil::CreateTabObject(
     const Extension* extension,
     TabStripModel* tab_strip,
     int tab_index) {
+#if !BUILDFLAG(IS_ANDROID) 
   if (!tab_strip)
     ExtensionTabUtil::GetTabStripModel(contents, &tab_strip, &tab_index);
+#endif
   api::tabs::Tab tab_object;
   tab_object.id = GetTabIdForExtensions(contents);
   tab_object.index = tab_index;
@@ -517,16 +536,22 @@ api::tabs::Tab ExtensionTabUtil::CreateTabObject(
     }
   }
 
+#if BUILDFLAG(IS_ANDROID)
+  CreateTabObjectAndroid(&tab_object, contents, extension, tab_index);
+#endif
+
   ScrubTabForExtension(extension, contents, &tab_object, scrub_tab_behavior);
   return tab_object;
 }
 
+#if !BUILDFLAG(IS_ANDROID)
 base::Value::List ExtensionTabUtil::CreateTabList(const Browser* browser,
                                                   const Extension* extension,
                                                   mojom::ContextType context) {
   return WindowControllerFromBrowser(browser)->CreateTabList(extension,
                                                              context);
 }
+#endif
 
 // static
 base::Value::Dict ExtensionTabUtil::CreateWindowValueForExtension(
@@ -757,6 +782,11 @@ bool ExtensionTabUtil::GetTabById(int tab_id,
     }
   }
 
+#if BUILDFLAG(IS_ANDROID)
+  if (GetTabByIdAndroid(tab_id, contents, tab_index)) {
+    return true;
+  }
+#endif 
   return false;
 }
 
@@ -1157,10 +1187,12 @@ bool ExtensionTabUtil::OpenOptionsPageFromAPI(
   return extensions::ExtensionTabUtil::OpenOptionsPage(extension, browser);
 }
 
+#if !BUILDFLAG(IS_ANDROID)
 bool ExtensionTabUtil::OpenOptionsPage(const Extension* extension,
                                        Browser* browser) {
   return WindowControllerFromBrowser(browser)->OpenOptionsPage(extension);
 }
+#endif
 
 // static
 bool ExtensionTabUtil::BrowserSupportsTabs(Browser* browser) {
