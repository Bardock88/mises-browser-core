diff --git a/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayMediatorTest.java b/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayMediatorTest.java
index e2cb7ede75e8fbb27fcef04171b82708f5ab20d3..c73c45b61dce8c85d0b41a9e1620b72b7bcfdfb7 100644
--- a/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayMediatorTest.java
+++ b/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayMediatorTest.java
@@ -28,7 +28,6 @@ import org.chromium.base.test.BaseRobolectricTestRunner;
 import org.chromium.chrome.browser.browser_controls.BrowserControlsStateProvider;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.layouts.LayoutStateProvider;
-import org.chromium.chrome.browser.layouts.LayoutType;
 import org.chromium.chrome.browser.tab.Tab;
 import org.chromium.chrome.browser.tab.TabObserver;
 import org.chromium.chrome.browser.theme.TopUiThemeColorProvider;
@@ -70,9 +69,6 @@ public class TopToolbarOverlayMediatorTest {
     @Captor
     private ArgumentCaptor<BrowserControlsStateProvider.Observer> mBrowserControlsObserverCaptor;
 
-    @Captor
-    private ArgumentCaptor<LayoutStateProvider.LayoutStateObserver> mLayoutObserverCaptor;
-
     @Mock
     private ObservableSupplier<Tab> mTabSupplier;
 
@@ -101,8 +97,7 @@ public class TopToolbarOverlayMediatorTest {
         when(mTabSupplier.get()).thenReturn(mTab);
         mMediator = new TopToolbarOverlayMediator(mModel, mContext, mLayoutStateProvider,
                 (info)-> {}, mTabSupplier, mBrowserControlsProvider, mTopUiThemeColorProvider,
-                LayoutType.BROWSING, false);
-
+                false);
         mMediator.setIsAndroidViewVisible(true);
 
         // Ensure the observer is added to the initial tab.
@@ -112,10 +107,6 @@ public class TopToolbarOverlayMediatorTest {
         verify(mTab).addObserver(mTabObserverCaptor.capture());
 
         verify(mBrowserControlsProvider).addObserver(mBrowserControlsObserverCaptor.capture());
-
-        verify(mLayoutStateProvider).addObserver(mLayoutObserverCaptor.capture());
-
-        mLayoutObserverCaptor.getValue().onStartedShowing(LayoutType.BROWSING, true);
     }
 
     /** Set the tab that will be returned by the supplier and trigger the observer event. */
@@ -182,46 +173,4 @@ public class TopToolbarOverlayMediatorTest {
         Assert.assertNull("The progress bar data should be still be empty.",
                 mModel.get(TopToolbarOverlayProperties.PROGRESS_BAR_INFO));
     }
-
-    @Test(expected = AssertionError.class)
-    public void testManualVisibility_flagNotSet() {
-        // If the manual visibility flag was not set in the constructor, expect as assert if someone
-        // attempts to set it.
-        mMediator.setManualVisibility(false);
-    }
-
-    @Test
-    public void testManualVisibility() {
-        mMediator.setVisibilityManuallyControlledForTesting(true);
-
-        // Set the manual visibility to true and modify things that would otherwise change it.
-        mMediator.setManualVisibility(true);
-        mMediator.setIsAndroidViewVisible(true);
-
-        Assert.assertTrue(
-                "Shadow should be visible.", mModel.get(TopToolbarOverlayProperties.SHOW_SHADOW));
-        Assert.assertTrue(
-                "View should be visible.", mModel.get(TopToolbarOverlayProperties.VISIBLE));
-
-        mBrowserControlsObserverCaptor.getValue().onControlsOffsetChanged(100, 0, 0, 0, false);
-
-        Assert.assertTrue(
-                "Shadow should be visible.", mModel.get(TopToolbarOverlayProperties.SHOW_SHADOW));
-        Assert.assertTrue(
-                "View should be visible.", mModel.get(TopToolbarOverlayProperties.VISIBLE));
-
-        // Set the manual visibility to false and modify things that would otherwise change it.
-        mMediator.setManualVisibility(false);
-
-        // Note that an invisible view implies invisible shadow as well.
-        Assert.assertFalse(
-                "View should be invisible.", mModel.get(TopToolbarOverlayProperties.VISIBLE));
-
-        mMediator.setIsAndroidViewVisible(false);
-
-        Assert.assertFalse(
-                "View should be invisible.", mModel.get(TopToolbarOverlayProperties.VISIBLE));
-
-        mMediator.setVisibilityManuallyControlledForTesting(false);
-    }
 }
