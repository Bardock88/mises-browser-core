diff --git a/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayCoordinator.java b/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayCoordinator.java
index a32c11f29932c27e395fb93a511d166012a7133d..03508ac32c445f7d7f5d7c4116fad097de5b4882 100644
--- a/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayCoordinator.java
+++ b/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayCoordinator.java
@@ -45,26 +45,25 @@ public class TopToolbarOverlayCoordinator implements SceneOverlay {
             ObservableSupplier<Tab> tabSupplier,
             BrowserControlsStateProvider browserControlsStateProvider,
             Supplier<ResourceManager> resourceManagerSupplier,
-            TopUiThemeColorProvider topUiThemeColorProvider, int layoutsToShowOn,
-            boolean isVisibilityManuallyControlled) {
+            TopUiThemeColorProvider topUiThemeColorProvider, int layoutsToShowOn, boolean isVisibilityManuallyControlled,  boolean isGridTabSwitcherEnabled) {
         mModel = new PropertyModel.Builder(TopToolbarOverlayProperties.ALL_KEYS)
                          .with(TopToolbarOverlayProperties.RESOURCE_ID, R.id.control_container)
                          .with(TopToolbarOverlayProperties.URL_BAR_RESOURCE_ID,
                                  R.drawable.modern_location_bar)
                          .with(TopToolbarOverlayProperties.VISIBLE, true)
-                         .with(TopToolbarOverlayProperties.X_OFFSET, 0)
+			 .with(TopToolbarOverlayProperties.X_OFFSET, 0)
                          .with(TopToolbarOverlayProperties.Y_OFFSET,
                                  browserControlsStateProvider.getTopControlOffset()
                                          + browserControlsStateProvider.getTopControlsMinHeight())
                          .with(TopToolbarOverlayProperties.ANONYMIZE, false)
-                         .build();
+			 .build();
         mSceneLayer = new TopToolbarSceneLayer(resourceManagerSupplier);
         mChangeProcessor =
                 layoutManager.createCompositorMCP(mModel, mSceneLayer, TopToolbarSceneLayer::bind);
 
         mMediator = new TopToolbarOverlayMediator(mModel, context, layoutManager,
                 progressInfoCallback, tabSupplier, browserControlsStateProvider,
-                topUiThemeColorProvider, layoutsToShowOn, isVisibilityManuallyControlled);
+                topUiThemeColorProvider, layoutsToShowOn, isVisibilityManuallyControlled, isGridTabSwitcherEnabled);
     }
 
     /**
@@ -75,21 +74,22 @@ public class TopToolbarOverlayCoordinator implements SceneOverlay {
         mMediator.setIsAndroidViewVisible(isVisible);
     }
 
-    /** @param visible Whether the overlay and shadow should be visible despite other signals. */
+  /** @param visible Whether the overlay and shadow should be visible despite other signals. */
     public void setManualVisibility(boolean visible) {
-        mMediator.setManualVisibility(visible);
+	//mMediator.setManualVisibility(visible);
     }
 
     /** @param xOffset The x offset of the toolbar. */
     public void setXOffset(float xOffset) {
-        mMediator.setXOffset(xOffset);
+	//mMediator.setXOffset(xOffset);
     }
 
     /** @param anonymize Whether the URL should be hidden when the layer is rendered. */
     public void setAnonymize(boolean anonymize) {
-        mMediator.setAnonymize(anonymize);
+	//mMediator.setAnonymize(anonymize);
     }
 
+
     /** Clean up this component. */
     public void destroy() {
         mChangeProcessor.destroy();
