diff --git a/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayMediator.java b/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayMediator.java
index 07b35008f49cb0d611c4dfff30ff4fe55b6bd2f6..bc013ac5fc0c172aa03dfa3e5883847c1ab27683 100644
--- a/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayMediator.java
+++ b/chrome/browser/ui/android/toolbar/java/src/org/chromium/chrome/browser/toolbar/top/TopToolbarOverlayMediator.java
@@ -59,6 +59,9 @@ public class TopToolbarOverlayMediator {
     /** The view state for this overlay. */
     private final PropertyModel mModel;
 
+    /** Whether the active layout has its own toolbar to display instead of this one. */
+    private boolean mLayoutHasOwnToolbar;
+
     /** Whether visibility is controlled internally or manually by the feature. */
     private boolean mIsVisibilityManuallyControlled;
 
@@ -77,7 +80,7 @@ public class TopToolbarOverlayMediator {
             ObservableSupplier<Tab> tabSupplier,
             BrowserControlsStateProvider browserControlsStateProvider,
             TopUiThemeColorProvider topUiThemeColorProvider, int layoutsToShowOn,
-            boolean manualVisibilityControl) {
+	    boolean manualVisibilityControl, boolean isGridTabSwitcherEnabled) {
         mContext = context;
         mLayoutStateProvider = layoutStateProvider;
         mProgressInfoCallback = progressInfoCallback;
@@ -85,7 +88,7 @@ public class TopToolbarOverlayMediator {
         mTopUiThemeColorProvider = topUiThemeColorProvider;
         mModel = model;
         mIsVisibilityManuallyControlled = manualVisibilityControl;
-
+ 
         mIsOnValidLayout = (mLayoutStateProvider.getActiveLayoutType() & layoutsToShowOn) > 0;
         updateVisibility();
 
@@ -93,6 +96,11 @@ public class TopToolbarOverlayMediator {
             @Override
             public void onStartedShowing(@LayoutType int layout, boolean showToolbar) {
                 mIsOnValidLayout = (layout & layoutsToShowOn) > 0;
+		// TODO(1100332): Once ToolbarSwipeLayout uses a SceneLayer that does not include
+                //                its own toolbar, only check for the vertical tab switcher.
+                mLayoutHasOwnToolbar =
+                        (layout == LayoutType.TAB_SWITCHER && !isGridTabSwitcherEnabled)
+                        || layout == LayoutType.TOOLBAR_SWIPE;
                 updateVisibility();
             }
         };
@@ -137,8 +145,8 @@ public class TopToolbarOverlayMediator {
                 int yOffset = topOffset + mBrowserControlsStateProvider.getTopControlsMinHeight();
                 mModel.set(TopToolbarOverlayProperties.Y_OFFSET, yOffset);
 
-                updateShadowState();
                 updateVisibility();
+                updateShadowState();
             }
         };
         mBrowserControlsStateProvider.addObserver(mBrowserControlsObserver);
@@ -160,8 +168,7 @@ public class TopToolbarOverlayMediator {
     private void updateShadowState() {
         boolean drawControlsAsTexture =
                 BrowserControlsUtils.drawControlsAsTexture(mBrowserControlsStateProvider);
-        boolean showShadow = drawControlsAsTexture || !mIsAndroidViewVisible
-                || mIsVisibilityManuallyControlled;
+        boolean showShadow = drawControlsAsTexture || !mIsAndroidViewVisible;
         mModel.set(TopToolbarOverlayProperties.SHOW_SHADOW, showShadow);
     }
 
@@ -232,13 +239,9 @@ public class TopToolbarOverlayMediator {
 
     /** Update the visibility of the overlay. */
     private void updateVisibility() {
-        if (mIsVisibilityManuallyControlled) {
-            mModel.set(TopToolbarOverlayProperties.VISIBLE, mManualVisibility && mIsOnValidLayout);
-        } else {
-            mModel.set(TopToolbarOverlayProperties.VISIBLE,
-                    !BrowserControlsUtils.areBrowserControlsOffScreen(mBrowserControlsStateProvider)
-                            && mIsOnValidLayout);
-        }
+        mModel.set(TopToolbarOverlayProperties.VISIBLE,
+                !BrowserControlsUtils.areBrowserControlsOffScreen(mBrowserControlsStateProvider)
+                        && !mLayoutHasOwnToolbar);
     }
 
     /** @return Whether this overlay should be attached to the tree. */
@@ -246,32 +249,6 @@ public class TopToolbarOverlayMediator {
         return true;
     }
 
-    /** @param xOffset The x offset of the toolbar. */
-    void setXOffset(float xOffset) {
-        mModel.set(TopToolbarOverlayProperties.X_OFFSET, xOffset);
-    }
-
-    /** @param anonymize Whether the URL should be hidden when the layer is rendered. */
-    void setAnonymize(boolean anonymize) {
-        mModel.set(TopToolbarOverlayProperties.ANONYMIZE, anonymize);
-    }
-
-    /** @param visible Whether the overlay and shadow should be visible despite other signals. */
-    void setManualVisibility(boolean visible) {
-        assert mIsVisibilityManuallyControlled
-                : "Manual visibility control was not set for this overlay.";
-        mManualVisibility = visible;
-        updateShadowState();
-        updateVisibility();
-    }
-
-    @VisibleForTesting
-    void setVisibilityManuallyControlledForTesting(boolean manuallyControlled) {
-        mIsVisibilityManuallyControlled = manuallyControlled;
-        updateShadowState();
-        updateVisibility();
-    }
-
     @VisibleForTesting
     static void setIsTabletForTesting(Boolean isTablet) {
         sIsTabletForTesting = isTablet;
