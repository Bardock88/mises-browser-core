diff --git a/ui/views/widget/widget.cc b/ui/views/widget/widget.cc
index 0b36c074cb789101af0e4fb9e0da9faec746e89c..a8cd1fc785b06b09924e59032d62dec6065061fe 100644
--- a/ui/views/widget/widget.cc
+++ b/ui/views/widget/widget.cc
@@ -487,11 +487,13 @@ void Widget::Init(InitParams params) {
   AddObserver(&root_view_->GetViewAccessibility());
 
   // Copy the elements of params that will be used after it is moved.
+#if !BUILDFLAG(IS_ANDROID)
   const InitParams::Type type = params.type;
   const gfx::Rect bounds = params.bounds;
   const ui::WindowShowState show_state = params.show_state;
-  WidgetDelegate* delegate = params.delegate;
   bool should_set_initial_bounds = true;
+#endif
+  WidgetDelegate* delegate = params.delegate;
 #if BUILDFLAG(IS_CHROMEOS)
   // If the target display is specified on ChromeOS, the initial bounds will be
   // set based on the display.
@@ -499,6 +501,7 @@ void Widget::Init(InitParams params) {
 #endif
 
   native_widget_->InitNativeWidget(std::move(params));
+#if !BUILDFLAG(IS_ANDROID)
   if (type == InitParams::TYPE_MENU)
     is_mouse_button_pressed_ = native_widget_->IsMouseButtonDown();
   if (RequiresNonClientView(type)) {
@@ -554,6 +557,7 @@ void Widget::Init(InitParams params) {
   }
 
   native_theme_observation_.Observe(GetNativeTheme());
+#endif
   native_widget_initialized_ = true;
   native_widget_->OnWidgetInitDone();
 
@@ -2197,11 +2201,13 @@ void Widget::OnDragWillStart() {}
 void Widget::OnDragComplete() {}
 
 const ui::NativeTheme* Widget::GetNativeTheme() const {
+#if !BUILDFLAG(IS_ANDROID)
   if (native_theme_)
     return native_theme_;
 
   if (parent_)
     return parent_->GetNativeTheme();
+#endif
 
 #if BUILDFLAG(IS_LINUX)
   if (auto* linux_ui_theme = ui::LinuxUiTheme::GetForWindow(GetNativeWindow()))
