diff --git a/chrome/browser/extensions/chrome_extensions_browser_client.cc b/chrome/browser/extensions/chrome_extensions_browser_client.cc
index 201155bd423a045e9e2eb6062b43952505ad33b1..13ebd3d8f11d7d3fe4a7c462f612e86bcf1b76c2 100644
--- a/chrome/browser/extensions/chrome_extensions_browser_client.cc
+++ b/chrome/browser/extensions/chrome_extensions_browser_client.cc
@@ -131,6 +131,8 @@
 #include "chromeos/startup/browser_params_proxy.h"
 #endif
 
+#include "components/safe_browsing/buildflags.h"
+
 namespace extensions {
 
 namespace {
@@ -808,6 +810,7 @@ void ChromeExtensionsBrowserClient::NotifyExtensionApiTabExecuteScript(
     content::BrowserContext* context,
     const ExtensionId& extension_id,
     const std::string& code) const {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
@@ -820,20 +823,26 @@ void ChromeExtensionsBrowserClient::NotifyExtensionApiTabExecuteScript(
   auto signal = std::make_unique<safe_browsing::TabsExecuteScriptSignal>(
       extension_id, code);
   telemetry_service->AddSignal(std::move(signal));
+#endif
 }
 
 bool ChromeExtensionsBrowserClient::IsExtensionTelemetryServiceEnabled(
     content::BrowserContext* context) const {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
   return telemetry_service && telemetry_service->enabled();
+#else
+  return false;
+#endif
 }
 
 void ChromeExtensionsBrowserClient::NotifyExtensionApiDeclarativeNetRequest(
     content::BrowserContext* context,
     const ExtensionId& extension_id,
     const std::vector<api::declarative_net_request::Rule>& rules) const {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
@@ -846,6 +855,7 @@ void ChromeExtensionsBrowserClient::NotifyExtensionApiDeclarativeNetRequest(
   auto signal = std::make_unique<safe_browsing::DeclarativeNetRequestSignal>(
       extension_id, rules);
   telemetry_service->AddSignal(std::move(signal));
+#endif
 }
 
 void ChromeExtensionsBrowserClient::
@@ -854,6 +864,7 @@ void ChromeExtensionsBrowserClient::
         const ExtensionId& extension_id,
         const GURL& request_url,
         const GURL& redirect_url) const {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
@@ -870,6 +881,7 @@ void ChromeExtensionsBrowserClient::
       CreateDeclarativeNetRequestRedirectActionSignal(extension_id, request_url,
                                                       redirect_url);
   telemetry_service->AddSignal(std::move(signal));
+#endif
 }
 
 void ChromeExtensionsBrowserClient::NotifyExtensionRemoteHostContacted(
@@ -882,7 +894,7 @@ void ChromeExtensionsBrowserClient::NotifyExtensionRemoteHostContacted(
               kExtensionTelemetryInterceptRemoteHostsContactedInRenderer)) {
     return;
   }
-
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::RemoteHostInfo::ProtocolType protocol =
       safe_browsing::RemoteHostInfo::UNSPECIFIED;
   if (base::FeatureList::IsEnabled(
@@ -907,6 +919,7 @@ void ChromeExtensionsBrowserClient::NotifyExtensionRemoteHostContacted(
       std::make_unique<safe_browsing::RemoteHostContactedSignal>(extension_id,
                                                                  url, protocol);
   telemetry_service->AddSignal(std::move(remote_host_signal));
+#endif
 }
 
 // static
