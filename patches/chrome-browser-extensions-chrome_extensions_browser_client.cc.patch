diff --git a/chrome/browser/extensions/chrome_extensions_browser_client.cc b/chrome/browser/extensions/chrome_extensions_browser_client.cc
index 783048414d3169054595eb0524c8f7a9ca74d87b..c3db0cca1faf1d4b50b5b6064d514c7c0107a043 100644
--- a/chrome/browser/extensions/chrome_extensions_browser_client.cc
+++ b/chrome/browser/extensions/chrome_extensions_browser_client.cc
@@ -132,6 +132,8 @@
 #include "chromeos/startup/browser_params_proxy.h"
 #endif
 
+#include "components/safe_browsing/buildflags.h"
+
 namespace extensions {
 
 namespace {
@@ -816,6 +818,7 @@ void ChromeExtensionsBrowserClient::NotifyExtensionApiTabExecuteScript(
     content::BrowserContext* context,
     const ExtensionId& extension_id,
     const std::string& code) const {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
@@ -828,20 +831,26 @@ void ChromeExtensionsBrowserClient::NotifyExtensionApiTabExecuteScript(
   auto signal = std::make_unique<safe_browsing::TabsExecuteScriptSignal>(
       extension_id, code);
   telemetry_service->AddSignal(std::move(signal));
+#endif
 }
 
 bool ChromeExtensionsBrowserClient::IsExtensionTelemetryServiceEnabled(
     content::BrowserContext* context) const {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
   return telemetry_service && telemetry_service->enabled();
+#else
+  return false;
+#endif
 }
 
 void ChromeExtensionsBrowserClient::NotifyExtensionApiDeclarativeNetRequest(
     content::BrowserContext* context,
     const ExtensionId& extension_id,
     const std::vector<api::declarative_net_request::Rule>& rules) const {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
@@ -854,6 +863,7 @@ void ChromeExtensionsBrowserClient::NotifyExtensionApiDeclarativeNetRequest(
   auto signal = std::make_unique<safe_browsing::DeclarativeNetRequestSignal>(
       extension_id, rules);
   telemetry_service->AddSignal(std::move(signal));
+#endif
 }
 
 void ChromeExtensionsBrowserClient::
@@ -862,6 +872,7 @@ void ChromeExtensionsBrowserClient::
         const ExtensionId& extension_id,
         const GURL& request_url,
         const GURL& redirect_url) const {
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   auto* telemetry_service =
       safe_browsing::ExtensionTelemetryServiceFactory::GetForProfile(
           Profile::FromBrowserContext(context));
@@ -878,6 +889,7 @@ void ChromeExtensionsBrowserClient::
       CreateDeclarativeNetRequestRedirectActionSignal(extension_id, request_url,
                                                       redirect_url);
   telemetry_service->AddSignal(std::move(signal));
+#endif
 }
 
 void ChromeExtensionsBrowserClient::NotifyExtensionRemoteHostContacted(
@@ -890,7 +902,7 @@ void ChromeExtensionsBrowserClient::NotifyExtensionRemoteHostContacted(
               kExtensionTelemetryInterceptRemoteHostsContactedInRenderer)) {
     return;
   }
-
+#if BUILDFLAG(FULL_SAFE_BROWSING)
   safe_browsing::RemoteHostInfo::ProtocolType protocol =
       safe_browsing::RemoteHostInfo::UNSPECIFIED;
   if (base::FeatureList::IsEnabled(
@@ -915,6 +927,7 @@ void ChromeExtensionsBrowserClient::NotifyExtensionRemoteHostContacted(
       std::make_unique<safe_browsing::RemoteHostContactedSignal>(extension_id,
                                                                  url, protocol);
   telemetry_service->AddSignal(std::move(remote_host_signal));
+#endif
 }
 
 // static
